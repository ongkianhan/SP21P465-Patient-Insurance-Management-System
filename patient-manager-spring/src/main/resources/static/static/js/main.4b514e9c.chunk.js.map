{"version":3,"sources":["actions/types.js","reducers/errorReducer.js","reducers/doctorReducer.js","reducers/currentUserReducer.js","reducers/appointmentReducer.js","reducers/securityReducer.js","reducers/index.js","store.js","securityUtils/SecuredRoute.js","components/Dashboards/DoctorDashboard.js","components/Dashboards/PatientDashboard.js","components/Dashboards/InsurerDashboard.js","securityUtils/DashboardRoute.js","actions/userRoles.js","static/defaultProfileIcon.png","components/UserSearch/DoctorCard.js","components/UserSearch/DoctorSearch.js","actions/userActions.js","actions/appointmentActions.js","components/CustomPopup.js","components/AppointmentScheduler.js","securityUtils/setJWTToken.js","actions/securityActions.js","components/SignUp/DoctorSignupForm.js","components/SignUp/PatientSignupForm.js","components/SignUp/InsurerSignupForm.js","components/SignUp/LoginForm.js","static/vitaLogoWhite.png","components/Header.js","static/vitaLogoColor.png","components/Footer.js","components/Landing.js","components/InvalidUserTypeLanding.js","static/doctorSelectionIcon.png","static/patientSelectionIcon.png","static/insurerSelectionIcon.png","components/SignUp/GeneralSignupForm.js","components/Chat/ChatContainer.js","components/DoctorProfileEditor.js","App.js","reportWebVitals.js","index.js"],"names":["GET_ERRORS","GET_MANY_DOCTORS","GET_ONE_DOCTOR","SET_CURRENT_USER","GET_ONE_APPOINTMENT","GET_MANY_APPOINTMENTS","GET_CURRENT_USER","initialState","allDoctors","doctor","currentUser","allAppointments","appointment","validToken","user","booleanActionPayload","payload","combineReducers","errors","state","action","type","security","middleware","thunk","ReactReduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","connect","Component","component","userTypeBlacklist","otherProps","undefined","indexOf","userType","render","props","to","Dashboard","outputDashboard","DoctorDashboard","PatientDashboard","InsurerDashboard","MakeAppointmentButton","DoctorCard","this","className","src","defaultProfileIcon","firstName","lastName","specialization","hospitalName","userId","noDoctorsMessage","DoctorSearch","getAllDoctors","length","role","classnames","placeholder","rows","onKeyPress","e","key","preventDefault","map","id","dispatch","a","axios","get","res","data","validateAppointment","errorOutput","getTime","Date","CustomPopup","headerText","content","backgroundColor","display","redirect","isWarning","inputString","setState","inputLink","closeButton","onClick","hide","bind","style","dateFormat","require","AppointmentScheduler","generateAppointmentTable","selectedDate","tableContent","time","setHours","setMinutes","setSeconds","setMilliseconds","dayOfWeek","push","getHours","appointmentStartTime","getMinutes","appointmentEndTime","isAvailable","i","date","handleSelectTime","data-value","appointmentTable","formattedDate","formattedTime","onChange","onSubmit","successPopup","React","createRef","match","params","getDoctor","history","getAppointmentsByDoctorId","nextProps","target","name","value","document","querySelector","valueAsDate","setDate","getDate","setFullYear","getFullYear","setMonth","getMonth","doctorId","frontEndErrors","Object","keys","createAppointment","current","setContent","show","event","selectedTime","currentTarget","getAttribute","selectedTimeObject","setTime","formmattedTime","marginTop","ref","post","response","setJWTToken","token","defaults","headers","common","createNewUser","newUser","login","LoginRequest","localStorage","setItem","decoded","jwtDecode","validateUser","test","DoctorSignupForm","email","password","newDoctor","paddingTop","color","fontFamily","PatientSignupForm","newPatient","InsurerSignupForm","firmName","newInsurer","LoginForm","Header","logout","location","href","headerLinks","userIsAuthenticated","userIsNotAuthenticated","paddingBottom","height","width","vitaLogoWhite","removeItem","Landing","textAlign","maxWidth","vitaLogoColor","fontSize","InvalidUserTypeLanding","GeneralSignupForm","marginLeft","marginRight","doctorIcon","patientIcon","insurerIcon","ChatContainer","DoctorProfileEditor","getCurrentUser","App","exact","path","Login","userTypeBlackList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"mTAAaA,EAAa,aAGbC,EAAmB,mBACnBC,EAAiB,iBAGjBC,EAAmB,mBAGnBC,EAAsB,sBACtBC,EAAwB,wBAGxBC,EAAmB,mBCZ1BC,EAAe,G,QCAfA,EAAe,CACjBC,WAAY,GACZC,OAAQ,ICFNF,EAAe,CACjBG,YAAa,ICDXH,EAAe,CACjBI,gBAAiB,GACjBC,YAAa,ICIXL,EAAe,CACjBM,YAAY,EACZC,KAAM,IAIJC,EAAuB,SAAAC,GACzB,QAAIA,GCLOC,cAAgB,CAC3BC,OLJW,WAAwC,IAA/BC,EAA8B,uDAAtBZ,EAAca,EAAQ,uCAClD,OAAQA,EAAOC,MAEX,KAAKrB,EACD,OAAOoB,EAAOJ,QAClB,QACI,OAAOG,IKDfV,OJJW,WACd,IADuBU,EACxB,uDADgCZ,EAAca,EAC9C,uCACI,OAAQA,EAAOC,MAEX,KAAKpB,EACD,OAAO,2BACAkB,GADP,IAEIX,WAAYY,EAAOJ,UAE3B,KAAKd,EACD,OAAO,2BACAiB,GADP,IAEIV,OAAQW,EAAOJ,UAEvB,QACI,OAAOG,IIVfT,YHNW,WACd,IADuBS,EACxB,uDADgCZ,EAAca,EAC9C,uCACI,OAAQA,EAAOC,MAEX,KAAKf,EACD,OAAO,2BACAa,GADP,IAEIT,YAAaU,EAAOJ,UAE5B,QACI,OAAOG,IGHfP,YFNW,WACd,IADuBO,EACxB,uDADgCZ,EAAca,EAC9C,uCACI,OAAQA,EAAOC,MAEX,KAAKhB,EACD,OAAO,2BACAc,GADP,IAEIR,gBAAiBS,EAAOJ,UAEhC,KAAKZ,EACD,OAAO,2BACAe,GADP,IAEIP,YAAaQ,EAAOJ,UAE5B,QACI,OAAOG,IERfG,SDQW,WACd,IADuBH,EACxB,uDADgCZ,EAAca,EAC9C,uCACI,OAAQA,EAAOC,MAEX,KAAKlB,EACD,OAAO,2BACAgB,GADP,IAEIN,WAAYE,EAAqBK,EAAOJ,SACxCF,KAAMM,EAAOJ,UAGrB,QACI,OAAOG,ME3BbZ,EAAe,GACfgB,EAAa,CAACC,KAGdC,EAAqBC,OAAOC,8BAAgCD,OAAOC,+BAmB1DC,EAjBXF,OAAOG,UAAUC,UAAUC,SAAS,WAAaN,EAEzCO,YACJC,EACA1B,EACA2B,YACIC,IAAe,WAAf,EAAmBZ,GACnBE,IAMAO,YAAYC,EAAa1B,EAAc2B,YAAQC,IAAe,WAAf,EAAmBZ,K,eCkB9E,IAIea,eAJS,SAACjB,GAAD,MAAY,CAChCG,SAAUH,EAAMG,YAGLc,EAtCR,YACN,IADyCC,EAC1C,EAD+BC,UAAsBhB,EACrD,EADqDA,SAAUiB,EAC/D,EAD+DA,kBAAsBC,EACrF,4DAEI,YAAyBC,GAArBF,GAIIA,EAAkBG,QAAQpB,EAASR,KAAK6B,WAAa,EAG9C,cAAC,IAAD,2BAAWH,GAAX,IAAuBI,OAAQ,SAACC,GAAD,OAAW,cAAC,IAAD,CAAUC,GAAG,2BAK/D,cAAC,IAAD,2BACCN,GADD,IAEHI,OAAQ,SAACC,GAAD,OAEoB,IAAxBvB,EAAST,WAEL,cAACwB,EAAD,eAAeQ,IAGf,cAAC,IAAD,CAAUC,GAAG,kBC9BvBC,E,kDAEF,aACC,wC,0CAID,WACI,OACI,gCACI,iEACA,6B,GAXQV,aAyBTD,eAJS,SAACjB,GAAD,MAAY,CAChCG,SAAUH,EAAMG,YAGLc,CAAyBW,GCzBlCA,E,kDAEF,aACC,wC,0CAID,WACI,OACI,gCACI,kEACA,6B,GAXQV,aAyBTD,eAJS,SAACjB,GAAD,MAAY,CAChCG,SAAUH,EAAMG,YAGLc,CAAyBW,GCzBlCA,E,kDAEF,aACC,wC,0CAID,WACI,OACI,gCACI,kEACA,6B,GAXQV,aAyBTD,eAJS,SAACjB,GAAD,MAAY,CAChCG,SAAUH,EAAMG,YAGLc,CAAyBW,GCSxC,IAIeX,eAJS,SAACjB,GAAD,MAAY,CAChCG,SAAUH,EAAMG,YAGLc,EA9BR,YACN,IAD+Bd,EAChC,EADgCA,SAAakB,EAC7C,4BACQQ,EAAkB,KACtB,OAAQ1B,EAASR,KAAK6B,UAElB,IClBW,MDmBPK,EAAkBC,EAClB,MACJ,ICpBW,MDqBPD,EAAkBE,EAClB,MACJ,ICtBW,MDuBPF,EAAkBG,EAI1B,OAAO,cAAC,IAAD,2BACCX,GADD,IAEHF,UAAWU,Q,yCE/BJ,MAA0B,+CCMrCI,EAAwB,KAsDbC,E,kDAlDX,aACC,wC,qDAID,WAIoB,OADCC,KAAKT,MAAMF,WAGxBS,EACK,wBAAQG,UAAU,sCAAlB,iC,oBAMb,WACC,IACU9C,EAAU6C,KAAKT,MAAfpC,OACP,OACI,qBAAK8C,UAAU,YAAf,SACA,qBAAKA,UAAU,+BAAf,SACI,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAU,QAAf,SACI,qBAAKA,UAAU,YAAYC,IAAKC,MAEpC,sBAAKF,UAAU,kBAAf,UACI,+BAAK9C,EAAOiD,UAAW,IAAKjD,EAAOkD,YACnC,6BAAKlD,EAAOmD,iBACZ,6BAAKnD,EAAOoD,kBAEhB,sBAAKN,UAAU,4BAAf,UACI,cAAC,IAAD,CAAMT,GAAE,gCAA2BrC,EAAOqD,QAA1C,SACKV,IAEL,cAAC,IAAD,CAAMN,GAAE,mBAAcrC,EAAOqD,QAA7B,SACI,wBAAQP,UAAU,wCAAlB,0C,GAxCHlB,a,iBCDrB0B,GAAmB,KAEjBC,G,uKAEF,WAEIV,KAAKT,MAAMoB,gBAGsB,IAA7BX,KAAKT,MAAMpC,OAAOyD,SAElBH,GACI,qBAAKR,UAAU,+BAA+BY,KAAK,QAAnD,2D,oBAOZ,WAAU,IAAD,OACE3D,EAAc8C,KAAKT,MAAMpC,OAAzBD,WAEP,OACI,qBAAK+C,UAAU,kBAAf,SACI,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,kCAAd,0BAEA,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAU,SAAf,SACI,uBACAA,UAAWa,KAAW,gBACtBC,YAAY,wBACZC,KAAK,IACLC,WAAY,SAAAC,GACK,UAAVA,EAAEC,KACDD,EAAEE,sBAId,qBAAKnB,UAAU,4BAAf,SACI,wBAAQlC,KAAK,SAASkC,UAAU,6BAAhC,yBAMR,uBAEA,uBAGC/C,EAAWmE,KAAI,SAAAlE,GAAM,OAClB,cAAC,EAAD,CAA4BA,OAAQA,EAAQkC,SAAU,EAAKE,MAAMvB,SAASR,KAAK6B,UAA9DlC,EAAOmE,OAE3Bb,gB,GAtDF1B,aA6EZD,gBALS,SAAAjB,GAAK,MAAK,CAC9BV,OAAQU,EAAMV,OACda,SAAUH,EAAMG,YAGoB,CAAC2C,cCnFZ,yDAAM,WAAMY,GAAN,eAAAC,EAAA,sEACbC,IAAMC,IAAI,4BADG,OACzBC,EADyB,OAE/BJ,EAAU,CACNxD,KAAMpB,EACNe,QAASiE,EAAIC,OAJc,2CAAN,wDDmFd9C,CAA2C4B,I,kBEtD7CmB,GAAsB,SAACvE,GAChC,IAAMwE,EAAc,GAYpB,OAV4B,OAAxBxE,EAAW,MAA6C,KAAxBA,EAAW,KAE3CwE,EAAW,KAAW,sCAGjBxE,EAAW,KAASyE,YAAc,IAAIC,MAAQD,YAEnDD,EAAW,KAAW,iDAGnBA,GCvCUG,G,kDAEjB,WAAa1C,GAAQ,IAAD,8BAChB,cAAMA,IAGD1B,MAAQ,CACTqE,WAAY,EAAK3C,MAAM4C,QACvBA,QAAS,EAAK5C,MAAM4C,QACpBC,gBAZU,UAaVC,QAAS,OACTC,SAAU,EAAK/C,MAAM+C,UAKG,GAAxB,EAAK/C,MAAMgD,YAEX,EAAK1E,MAAMuE,gBApBD,WAIE,E,iDAsBpB,SAAcI,GACVxC,KAAKyC,SAAS,CAACP,WAAYM,M,wBAG/B,SAAWA,GACPxC,KAAKyC,SAAS,CAACN,QAASK,M,yBAG5B,SAAYE,GACR1C,KAAKyC,SAAS,CAACH,SAAUI,M,kBAG7B,WACI1C,KAAKyC,SAAS,CAACJ,QAAS,Y,kBAG5B,WACIrC,KAAKyC,SAAS,CAACJ,QAAS,W,oBAG5B,WAGI,IAAIM,EAGAA,EAFuB,MAAvB3C,KAAKnC,MAAMyE,SAEG,cAAC,IAAD,CAAM9C,GAAE,UAAKQ,KAAKnC,MAAMyE,UAAYrC,UAAU,qBAAqB2C,QAAS5C,KAAK6C,KAAKC,KAAK9C,MAA3F,kBAIA,sBAAMC,UAAU,qBAAqB2C,QAAS5C,KAAK6C,KAAKC,KAAK9C,MAA7D,kBATtB,IAYWqC,EAAWrC,KAAKnC,MAAhBwE,QACP,OACI,qBAAKpC,UAAU,cAAc8C,MAAO,CAACV,QAASA,GAA9C,SACI,sBAAKpC,UAAU,gBAAf,UACI,sBAAKA,UAAU,eAAe8C,MAAO,CAAEX,gBAAiBpC,KAAKnC,MAAMuE,iBAAnE,UACI,oBAAInC,UAAU,oBAAd,SAAmCD,KAAKnC,MAAMqE,aAC7CS,KAEL,mBAAG1C,UAAU,aAAb,SAA2BD,KAAKnC,MAAMsE,mB,GAjEjBpD,aCErCiE,GAAaC,EAAQ,IAMnBC,G,kDAEF,aACC,IAAD,8BACI,gBA0FJC,yBAA2B,SAACC,GAAkB,IACnC/F,EAAmB,EAAKkC,MAAMjC,YAA9BD,gBAGH2F,EAAaC,EAAQ,IAErBI,EAAe,GAEfC,EAAOF,EACXE,EAAKC,SA3GU,GA4GfD,EAAKE,WAAW,GAChBF,EAAKG,WAAW,GAChBH,EAAKI,gBAAgB,GAGrB,IAAIC,EAAYX,EAAWM,EAAM,iBAQjC,IAPAD,EAAaO,KACT,oBAAI3D,UAAU,iBAAd,SACK0D,KAKFL,EAAKO,WAxHC,IAyHb,CAGI,IAAIC,EAAuBd,EAAWM,EAAM,QAC5CA,EAAKE,WAAWF,EAAKS,aA5HV,IA6HX,IAAIC,EAAqBhB,EAAWM,EAAM,QAC1CA,EAAKE,WAAWF,EAAKS,aA9HV,IAmIX,IADA,IAAIE,GAAc,EACTC,EAAI,EAAGA,EAAI7G,EAAgBuD,OAAQsD,IAEpC,IAAIlC,KAAK3E,EAAgB6G,GAAGC,MAAMpC,WAAauB,EAAKvB,YAEpDkC,GAAc,EACdC,EAAI7G,EAAgBuD,QAIxBqD,EAKAZ,EAAaO,KACT,6BACI,qBAAIhB,QAAS,EAAKwB,iBAAiBtB,KAAtB,iBAAkCuB,aAAaf,EAAMvB,UAAW9B,UAAU,qCAAvF,UACI,sBAAMA,UAAU,iCAAhB,kBACC6D,EAAsB,IAAKE,QAOxCX,EAAaO,KACT,6BACI,qBAAI3D,UAAU,sCAAd,UACI,sBAAMA,UAAU,iCAAhB,oBACC6D,EAAsB,IAAKE,QAM5CV,EAAKE,WAAWF,EAAKS,aAtKV,IAyKf,EAAKtB,SAAS,CAAE6B,iBAAkBjB,KAlKlC,EAAKxF,MAAQ,CACTsG,KAAM,GACNb,KAAM,KACNiB,cAAevB,GAAW,IAAIhB,KAAQ,cACtCwC,cAAe,eACfF,iBAAkB,2DAClB1G,OAAQ,IAGZ,EAAK6G,SAAW,EAAKA,SAAS3B,KAAd,iBAChB,EAAK4B,SAAW,EAAKA,SAAS5B,KAAd,iBAChB,EAAK6B,aAAeC,IAAMC,YAb9B,E,qDAgBA,WACA,IAEWrE,EAAUR,KAAKT,MAAMuF,MAAMC,OAA3BvE,OAEPR,KAAKT,MAAMyF,UAAUxE,EAAQR,KAAKT,MAAM0F,SAGxCjF,KAAKT,MAAM2F,0BAA0B1E,GACrCR,KAAKmD,yBAAyB,IAAInB,Q,uCAGtC,SAA0BmD,GAElBA,EAAUvH,QACVoC,KAAKyC,SAAS,CAAE7E,OAAQuH,EAAUvH,W,sBAI1C,SAASsD,GAIL,GADAlB,KAAKyC,SAAL,gBAAiBvB,EAAEkE,OAAOC,KAAOnE,EAAEkE,OAAOE,QACpB,SAAlBpE,EAAEkE,OAAOC,KACb,CAEI,IAAIjC,EAAemC,SAASC,cAAc,eAAeC,YACzDrC,EAAasC,QAAQtC,EAAauC,UAAU,GAG5C,IAAIpB,EAAgBvB,GAAWI,EAAc,cAC7CpD,KAAKyC,SAAS,CAAC8B,cAAeA,IAG9B,IAAIjB,EAAOtD,KAAKnC,MAAMyF,KACV,MAARA,IAEAA,EAAKsC,YAAYxC,EAAayC,eAC9BvC,EAAKwC,SAAS1C,EAAa2C,YAC3BzC,EAAKoC,QAAQtC,EAAauC,YAI9B3F,KAAKmD,yBAAyBC,M,sBAItC,SAASlC,GAELA,EAAEE,iBAEF,IAAI9D,EAAc,CACd6G,KAAMnE,KAAKnC,MAAMyF,MAEjB0C,EAAWhG,KAAKT,MAAMpC,OAAOA,OAAOqD,OAGlCyF,EAAiBpE,GAAoBvE,GACD,GAAtC4I,OAAOC,KAAKF,GAAgBrF,QAOhCZ,KAAKT,MAAM6G,kBAAkB9I,EAAa0I,EAAUhG,KAAKT,MAAM0F,SAG/DjF,KAAK2E,aAAa0B,QAAQC,WACtB,2CAA2CtG,KAAKT,MAAMpC,OAAOA,OAAOiD,UAAU,IAAIJ,KAAKT,MAAMpC,OAAOA,OAAOkD,SAAS,OAAOL,KAAKnC,MAAM0G,cACtI,OAAOvE,KAAKnC,MAAM2G,eACtBxE,KAAK2E,aAAa0B,QAAQE,QAXtBvG,KAAKyC,SAAS,CAAE7E,OAAQqI,M,8BA2FhC,SAAiBO,GAGb,IAAMC,EAAeD,EAAME,cAAcC,aAAa,cAChDC,EAAqB,IAAI5E,KAC/B4E,EAAmBC,QAAQJ,GAG3B,IAAMK,EAAiB9D,GAAW4D,EAAoB,WAEtD5G,KAAKyC,SAAS,CAACa,KAAMsD,EAAoBpC,cAAesC,M,oBAI5D,WAAU,IACC3J,EAAU6C,KAAKT,MAAMpC,OAArBA,OAEAS,GADUoC,KAAKT,MAAMuF,MAAMC,OAA3BvE,OACUR,KAAKnC,MAAfD,QAEP,OACI,8BACI,sBAAKqC,UAAU,YAAf,UACA,oBAAIA,UAAU,kCAAd,qCACI,sBAAMyE,SAAU1E,KAAK0E,SAArB,SACI,sBAAKzE,UAAU,wBAAwB8C,MAAO,CAACgE,UAAW,eAA1D,UACI,sBAAK9G,UAAU,WAAf,UAGI,mBAAGA,UAAU,wBAAb,mDACA,uBAAOlC,KAAK,OACZkC,UAAWa,KAAW,uBAClB,CAAC,aAAclD,EAAOuG,OAC1BkB,KAAK,OACLC,MAAOtF,KAAKnC,MAAMsG,KAClBM,SAAUzE,KAAKyE,SACfnD,GAAG,eACF1D,EAAOuG,MACJ,qBAAKlE,UAAU,mBAAf,SAAmCrC,EAAOuG,OAI9C,sBAAKlE,UAAU,iBAAiB8C,MAAO,CAACgE,UAAW,SAAnD,UACI,mBAAG9G,UAAU,mCAAb,iCACA,oBAAGA,UAAU,sBAAb,qBAA4C9C,EAAOiD,UAAW,IAAKjD,EAAOkD,YAC1E,oBAAGJ,UAAU,sBAAb,mBAA0CD,KAAKnC,MAAM0G,iBACrD,oBAAGtE,UAAU,sBAAb,mBAA0CD,KAAKnC,MAAM2G,iBACrD,oBAAGvE,UAAU,sBAAb,uBAA8C9C,EAAOoD,mBAIzD,qBAAKN,UAAU,6BAAf,SACI,uBACIlC,KAAK,SACLkC,UAAU,+BACVqF,MAAM,0BAIlB,qBAAKrF,UAAU,WAAf,SACI,gCACKD,KAAKnC,MAAMyG,0BAM5B,cAAC,GAAD,CAAa0C,IAAKhH,KAAK2E,aAAcrC,SAAS,aAAaJ,WAAW,UAAUC,QAAQ,oC,GA5OzEpD,aAqQpBD,gBANS,SAAAjB,GAAK,MAAK,CAC9BP,YAAaO,EAAMP,YACnBH,OAAQU,EAAMV,OACdS,OAAQC,EAAMD,UAGsB,CAACwI,kBFhRR,SAAC9I,EAAa0I,EAAUf,GAAxB,8CAAoC,WAAM1D,GAAN,SAAAC,EAAA,+EAGvDC,IAAMwF,KAAN,+CAAmDjB,GAAY1I,GAHR,OAI7DiE,EACA,CACIxD,KAAMrB,EAENgB,QAAS,KARgD,+CAa7D6D,EACA,CACIxD,KAAMrB,EACNgB,QAAS,KAAIwJ,SAAStF,OAhBmC,wDAApC,uDEgR2BsD,0BF3PnB,SAACc,GAAD,8CAAc,WAAMzE,GAAN,eAAAC,EAAA,sEACjCC,IAAMC,IAAN,0CAA6CsE,IADZ,OAC7CrE,EAD6C,OAEnDJ,EAAU,CACNxD,KAAMhB,EACNW,QAASiE,EAAIC,OAJkC,2CAAd,uDE2P8CoD,UHtQ9D,SAAC1D,EAAI2D,GAAL,8CAAiB,WAAM1D,GAAN,eAAAC,EAAA,+EAEhBC,IAAMC,IAAN,uBAA0BJ,IAFV,OAE5BK,EAF4B,OAGlCJ,EAAS,CACLxD,KAAMnB,EACNc,QAASiE,EAAIC,OALiB,gDAQlCqD,EAAQrB,KAAK,cARqB,yDAAjB,uDGsQyE/B,wBAAnF/C,CAA0GoE,ICjQ1GiE,GAXK,SAAAC,GACZA,EAEA3F,IAAM4F,SAASC,QAAQC,OAAvB,cAAiDH,SAI1C3F,IAAM4F,SAASC,QAAQC,OAAvB,e,SCHFC,GAAgB,SAACC,EAASpI,EAAU4F,GAApB,8CAAgC,WAAM1D,GAAN,SAAAC,EAAA,+EAG/CC,IAAMwF,KAAK,uBAAuB5H,EAAUoI,GAHG,OAIrDlG,EAAS,CACLxD,KAAMrB,EACNgB,QAAS,KANwC,+CAWrD6D,EAAS,CACLxD,KAAMrB,EACNgB,QAAS,KAAIwJ,SAAStF,OAb2B,wDAAhC,uDAmBhB8F,GAAQ,SAAAC,GAAY,8CAAI,WAAMpG,GAAN,mBAAAC,EAAA,+EAIXC,IAAMwF,KAAK,qBAAsBU,GAJtB,OAIvBhG,EAJuB,OAMrByF,EAAUzF,EAAIC,KAAdwF,MAERQ,aAAaC,QAAQ,WAAYT,GAEjCD,GAAYC,GAENU,EAAUC,aAAUX,GAE1B7F,EAAS,CACLxD,KAAMlB,EACNa,QAASoK,IAhBgB,kDAqB3BvG,EAAS,CACLxD,KAAMrB,EACNgB,QAAS,KAAIwJ,SAAStF,OAvBC,0DAAJ,uDAuCpBoG,GAAe,SAAExK,GAC1B,IAAMsE,EAAc,GAUpB,MARI,KAAKmG,KAAKzK,EAAK4C,aAEf0B,EAAW,UAAgB,qCAE3B,KAAKmG,KAAKzK,EAAK6C,YAEfyB,EAAW,SAAe,oCAEvBA,GCxELoG,G,kDACF,aAAe,IAAD,8BACV,gBAEKrK,MAAQ,CACTsK,MAAO,GACPC,SAAU,GACVhI,UAAW,GACXC,SAAU,GACVC,eAAgB,GAChBC,aAAc,GACd3C,OAAQ,IAEZ,EAAK6G,SAAW,EAAKA,SAAS3B,KAAd,iBAChB,EAAK4B,SAAW,EAAKA,SAAS5B,KAAd,iBAbN,E,qDAgBd,WAGQ9C,KAAKT,MAAMvB,SAAST,YACpByC,KAAKT,MAAM0F,QAAQrB,KAAK,gB,uCAIhC,SAA0BuB,GAClBA,EAAUvH,QACVoC,KAAKyC,SAAS,CAAE7E,OAAQuH,EAAUvH,W,6DAK1C,WAAesD,GAAf,mBAAAM,EAAA,yDACIN,EAAEE,iBAEIiH,EAAY,CACdF,MAAOnI,KAAKnC,MAAMsK,MAClBC,SAAUpI,KAAKnC,MAAMuK,SACrBhI,UAAWJ,KAAKnC,MAAMuC,UACtBC,SAAUL,KAAKnC,MAAMwC,SACrBC,eAAgBN,KAAKnC,MAAMyC,eAC3BC,aAAcP,KAAKnC,MAAM0C,aACzB3C,OAAQ,IAINqI,EAAiB+B,GAAaK,GACM,GAAtCnC,OAAOC,KAAKF,GAAgBrF,OAfpC,uBAiBQZ,KAAKyC,SAAS,CAAE7E,OAAQqI,IAjBhC,0CAsBUjG,KAAKT,MAAMiI,cAAca,EAAW,SAAUrI,KAAKT,MAAM0F,QAASjF,KAAKT,MAAMmI,OAtBvF,UAwBiD,GAAzCxB,OAAOC,KAAKnG,KAAKnC,MAAMD,QAAQgD,OAxBvC,wBA2Bc+G,EAAe,CACjBQ,MAAOnI,KAAKnC,MAAMsK,MAClBC,SAAUpI,KAAKnC,MAAMuK,UA7BjC,UA+BcpI,KAAKT,MAAMmI,MAAMC,GA/B/B,QAiCQ3H,KAAKT,MAAM0F,QAAQrB,KAAK,cAjChC,iD,6EAqCA,SAAS1C,GACLlB,KAAKyC,SAAL,gBAAiBvB,EAAEkE,OAAOC,KAAOnE,EAAEkE,OAAOE,U,oBAG9C,WAAU,IACE1H,EAAWoC,KAAKnC,MAAhBD,OACR,OACI,qBAAKqC,UAAU,WAAf,SACI,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UAEI,qBACIA,UAAU,YACV8C,MAAO,CAAEuF,WAAY,MAFzB,SAII,cAAC,IAAD,CACI9I,GAAG,eACHuD,MAAO,CAAEwF,MAAO,SAFpB,SAII,wBACIxF,MAAO,CAAEyF,WAAY,iBADzB,6CAOR,oBAAIvI,UAAU,kCAAd,+BAIA,sBAAKA,UAAU,iBAAf,UACI,mBAAGA,UAAU,mCAAb,+BAIA,uBAAMyE,SAAU1E,KAAK0E,SAArB,UAEI,kCAEI,+BACI,oBAAIzE,UAAU,oBAAd,SACI,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBACA,CACI,aACIlD,EAAOuK,QAGnBpH,YAAY,gBACZsE,KAAK,QACLC,MAAOtF,KAAKnC,MAAMsK,MAClB1D,SAAUzE,KAAKyE,WAElB7G,EAAOuK,OACJ,qBAAKlI,UAAU,mBAAf,SACKrC,EAAOuK,aAKxB,oBAAIlI,UAAU,oBAAd,SACI,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBACA,CACI,aACIlD,EAAOwK,WAGnBrH,YAAY,WACZsE,KAAK,WACLC,MACItF,KAAKnC,MAAMuK,SAEf3D,SAAUzE,KAAKyE,WAElB7G,EAAOwK,UACJ,qBAAKnI,UAAU,mBAAf,SACKrC,EAAOwK,mBAO5B,+BACI,oBAAInI,UAAU,oBAAd,SACI,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBACA,CACI,aACIlD,EAAOwC,YAGnBW,YAAY,aACZsE,KAAK,YACLC,MACItF,KAAKnC,MAAMuC,UAEfqE,SAAUzE,KAAKyE,WAElB7G,EAAOwC,WACJ,qBAAKH,UAAU,mBAAf,SACKrC,EAAOwC,iBAKxB,oBAAIH,UAAU,oBAAd,SACI,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBACA,CACI,aACIlD,EAAOyC,WAGnBU,YAAY,YACZsE,KAAK,WACLC,MACItF,KAAKnC,MAAMwC,SAEfoE,SAAUzE,KAAKyE,WAElB7G,EAAOyC,UACJ,qBAAKJ,UAAU,mBAAf,SACKrC,EAAOyC,mBAO5B,+BACI,oBAAIJ,UAAU,oBAAd,SACI,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBACA,CACI,aACIlD,EAAO0C,iBAGnBS,YAAY,iBACZsE,KAAK,iBACLC,MACItF,KAAKnC,MAAMyC,eAEfmE,SAAUzE,KAAKyE,WAElB7G,EAAO0C,gBACJ,qBAAKL,UAAU,mBAAf,SACKrC,EAAO0C,sBAKxB,oBAAIL,UAAU,oBAAd,SACI,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBACA,CACI,aACIlD,EAAO2C,eAGnBQ,YAAY,gBACZsE,KAAK,eACLC,MACItF,KAAKnC,MAAM0C,aAEfkE,SAAUzE,KAAKyE,WAElB7G,EAAO2C,cACJ,qBAAKN,UAAU,mBAAf,SAEQrC,EAAO2C,0BASnC,qBAAKN,UAAU,6BAAf,SACI,uBACIlC,KAAK,SACLkC,UAAU,+BACVqF,MAAM,wC,GAjRnBvG,aA2ShBD,gBALS,SAACjB,GAAD,MAAY,CAChCD,OAAQC,EAAMD,OACdI,SAAUH,EAAMG,YAGoB,CAAEwJ,iBAAeE,SAAOM,iBAAjDlJ,CAAiEoJ,IC3S1EO,G,kDACF,aAAe,IAAD,8BACV,gBAEK5K,MAAQ,CACTsK,MAAO,GACPC,SAAU,GACVhI,UAAW,GACXC,SAAU,GACVzC,OAAQ,IAEZ,EAAK6G,SAAW,EAAKA,SAAS3B,KAAd,iBAChB,EAAK4B,SAAW,EAAKA,SAAS5B,KAAd,iBAXN,E,qDAcd,WAGQ9C,KAAKT,MAAMvB,SAAST,YACpByC,KAAKT,MAAM0F,QAAQrB,KAAK,gB,uCAIhC,SAA0BuB,GAClBA,EAAUvH,QACVoC,KAAKyC,SAAS,CAAE7E,OAAQuH,EAAUvH,W,6DAK1C,WAAesD,GAAf,mBAAAM,EAAA,yDACIN,EAAEE,iBAEIsH,EAAa,CACfP,MAAOnI,KAAKnC,MAAMsK,MAClBC,SAAUpI,KAAKnC,MAAMuK,SACrBhI,UAAWJ,KAAKnC,MAAMuC,UACtBC,SAAUL,KAAKnC,MAAMwC,SACrBC,eAAgBN,KAAKnC,MAAMyC,eAC3B1C,OAAQ,IAINqI,EAAiB+B,GAAaU,GACM,GAAtCxC,OAAOC,KAAKF,GAAgBrF,OAdpC,uBAgBQZ,KAAKyC,SAAS,CAAE7E,OAAQqI,IAhBhC,0CAqBUjG,KAAKT,MAAMiI,cAAckB,EAAY,UAAW1I,KAAKT,MAAM0F,SArBrE,UAuBiD,GAAzCiB,OAAOC,KAAKnG,KAAKnC,MAAMD,QAAQgD,OAvBvC,wBA0Bc+G,EAAe,CACjBQ,MAAOnI,KAAKnC,MAAMsK,MAClBC,SAAUpI,KAAKnC,MAAMuK,UA5BjC,UA8BcpI,KAAKT,MAAMmI,MAAMC,GA9B/B,QAgCQ3H,KAAKT,MAAM0F,QAAQrB,KAAK,cAhChC,iD,6EAoCA,SAAS1C,GACLlB,KAAKyC,SAAL,gBAAiBvB,EAAEkE,OAAOC,KAAOnE,EAAEkE,OAAOE,U,oBAG9C,WAAU,IACE1H,EAAWoC,KAAKnC,MAAhBD,OACR,OACI,qBAAKqC,UAAU,WAAf,SACI,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UAEI,qBAAKA,UAAU,YAAY8C,MAAO,CAACuF,WAAW,MAA9C,SACI,cAAC,IAAD,CAAM9I,GAAG,eAAeuD,MAAO,CAACwF,MAAM,SAAtC,SAAgD,wBAAQxF,MAAS,CAACyF,WAAW,iBAA7B,6CAEpD,oBAAIvI,UAAU,kCAAd,+BAEA,sBAAKA,UAAU,iBAAf,UACI,mBAAGA,UAAU,mCAAb,kCAEA,uBAAMyE,SAAU1E,KAAK0E,SAArB,UAEI,kCAEI,+BACI,oBAAIzE,UAAU,oBAAd,SACA,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBAAwB,CAAC,aAAclD,EAAOuK,QAElDpH,YAAY,gBACZsE,KAAK,QACLC,MAAOtF,KAAKnC,MAAMsK,MAClB1D,SAAUzE,KAAKyE,WAElB7G,EAAOuK,OACJ,qBAAKlI,UAAU,mBAAf,SACKrC,EAAOuK,aAKpB,oBAAIlI,UAAU,oBAAd,SACA,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBAAwB,CAAC,aAAclD,EAAOwK,WAElDrH,YAAY,WACZsE,KAAK,WACLC,MAAOtF,KAAKnC,MAAMuK,SAClB3D,SAAUzE,KAAKyE,WAElB7G,EAAOwK,UACJ,qBAAKnI,UAAU,mBAAf,SACKrC,EAAOwK,mBAOxB,+BACI,oBAAInI,UAAU,oBAAd,SACA,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBAAwB,CAAC,aAAclD,EAAOwC,YAElDW,YAAY,aACZsE,KAAK,YACLC,MAAOtF,KAAKnC,MAAMuC,UAClBqE,SAAUzE,KAAKyE,WAElB7G,EAAOwC,WACJ,qBAAKH,UAAU,mBAAf,SACKrC,EAAOwC,iBAKpB,oBAAIH,UAAU,oBAAd,SACA,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBAAwB,CAAC,aAAclD,EAAOyC,WAElDU,YAAY,YACZsE,KAAK,WACLC,MAAOtF,KAAKnC,MAAMwC,SAClBoE,SAAUzE,KAAKyE,WAElB7G,EAAOyC,UACJ,qBAAKJ,UAAU,mBAAf,SACKrC,EAAOyC,sBAQ5B,qBAAKJ,UAAU,6BAAf,SACI,uBACIlC,KAAK,SACLkC,UAAU,+BACVqF,MAAM,wC,GAjLlBvG,aA2MjBD,gBALS,SAACjB,GAAD,MAAY,CAChCD,OAAQC,EAAMD,OACdI,SAAUH,EAAMG,YAGoB,CAAEwJ,iBAAeE,SAAOM,iBAAjDlJ,CAAiE2J,IC3M1EE,G,kDAEF,aACC,IAAD,8BACI,gBAEK9K,MAAQ,CACTsK,MAAO,GACPC,SAAU,GACVhI,UAAW,GACXC,SAAU,GACVuI,SAAU,GACVhL,OAAQ,IAEZ,EAAK6G,SAAW,EAAKA,SAAS3B,KAAd,iBAChB,EAAK4B,SAAW,EAAKA,SAAS5B,KAAd,iBAZpB,E,qDAeA,WAIQ9C,KAAKT,MAAMvB,SAAST,YACpByC,KAAKT,MAAM0F,QAAQrB,KAAK,gB,uCAIhC,SAA0BuB,GAElBA,EAAUvH,QACVoC,KAAKyC,SAAS,CAAE7E,OAAQuH,EAAUvH,W,6DAK1C,WAAesD,GAAf,mBAAAM,EAAA,yDAEIN,EAAEE,iBAEIyH,EAAa,CACfV,MAAOnI,KAAKnC,MAAMsK,MAClBC,SAAUpI,KAAKnC,MAAMuK,SACrBhI,UAAWJ,KAAKnC,MAAMuC,UACtBC,SAAUL,KAAKnC,MAAMwC,SACrBuI,SAAU5I,KAAKnC,MAAM+K,SACrBhL,OAAQ,IAINqI,EAAiB+B,GAAaa,GACM,GAAtC3C,OAAOC,KAAKF,GAAgBrF,OAfpC,uBAiBQZ,KAAKyC,SAAS,CAAE7E,OAAQqI,IAjBhC,0CAsBUjG,KAAKT,MAAMiI,cAAcqB,EAAY,UAAW7I,KAAKT,MAAM0F,SAtBrE,UAwBiD,GAAzCiB,OAAOC,KAAKnG,KAAKnC,MAAMD,QAAQgD,OAxBvC,wBA2Bc+G,EAAe,CACjBQ,MAAOnI,KAAKnC,MAAMsK,MAClBC,SAAUpI,KAAKnC,MAAMuK,UA7BjC,UA+BcpI,KAAKT,MAAMmI,MAAMC,GA/B/B,QAiCQ3H,KAAKT,MAAM0F,QAAQrB,KAAK,cAjChC,iD,6EAqCA,SAAS1C,GAELlB,KAAKyC,SAAL,gBAAiBvB,EAAEkE,OAAOC,KAAOnE,EAAEkE,OAAOE,U,oBAG9C,WACC,IACW1H,EAAWoC,KAAKnC,MAAhBD,OACR,OACI,qBAAKqC,UAAU,WAAf,SACI,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UAEI,qBAAKA,UAAU,YAAY8C,MAAO,CAACuF,WAAW,MAA9C,SACI,cAAC,IAAD,CAAM9I,GAAG,eAAeuD,MAAO,CAACwF,MAAM,SAAtC,SAAgD,wBAAQxF,MAAS,CAACyF,WAAW,iBAA7B,6CAEpD,oBAAIvI,UAAU,kCAAd,+BAEA,sBAAKA,UAAU,iBAAf,UACI,mBAAGA,UAAU,mCAAb,8CAEA,uBAAMyE,SAAU1E,KAAK0E,SAArB,UAEI,kCAEI,+BACI,oBAAIzE,UAAU,oBAAd,SACA,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBAAwB,CAAC,aAAclD,EAAOuK,QAElDpH,YAAY,gBACZsE,KAAK,QACLC,MAAOtF,KAAKnC,MAAMsK,MAClB1D,SAAUzE,KAAKyE,WAElB7G,EAAOuK,OACJ,qBAAKlI,UAAU,mBAAf,SACKrC,EAAOuK,aAKpB,oBAAIlI,UAAU,oBAAd,SACA,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBAAwB,CAAC,aAAclD,EAAOwK,WAElDrH,YAAY,WACZsE,KAAK,WACLC,MAAOtF,KAAKnC,MAAMuK,SAClB3D,SAAUzE,KAAKyE,WAElB7G,EAAOwK,UACJ,qBAAKnI,UAAU,mBAAf,SACKrC,EAAOwK,mBAOxB,+BACI,oBAAInI,UAAU,oBAAd,SACA,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBAAwB,CAAC,aAAclD,EAAOwC,YAElDW,YAAY,aACZsE,KAAK,YACLC,MAAOtF,KAAKnC,MAAMuC,UAClBqE,SAAUzE,KAAKyE,WAElB7G,EAAOwC,WACJ,qBAAKH,UAAU,mBAAf,SACKrC,EAAOwC,iBAKpB,oBAAIH,UAAU,oBAAd,SACA,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBAAwB,CAAC,aAAclD,EAAOyC,WAElDU,YAAY,YACZsE,KAAK,WACLC,MAAOtF,KAAKnC,MAAMwC,SAClBoE,SAAUzE,KAAKyE,WAElB7G,EAAOyC,UACJ,qBAAKJ,UAAU,mBAAf,SACKrC,EAAOyC,mBAOxB,6BACI,oBAAIJ,UAAU,oBAAd,SACA,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBAAwB,CAAC,aAAclD,EAAOgL,WAElD7H,YAAY,eACZsE,KAAK,WACLC,MAAOtF,KAAKnC,MAAM+K,SAClBnE,SAAUzE,KAAKyE,WAElB7G,EAAOgL,UACJ,qBAAK3I,UAAU,mBAAf,SACKrC,EAAOgL,qBAQ5B,qBAAK3I,UAAU,6BAAf,SACI,uBACIlC,KAAK,SACLkC,UAAU,+BACVqF,MAAM,wC,GA/MlBvG,aAyOjBD,gBALS,SAACjB,GAAD,MAAY,CAChCD,OAAQC,EAAMD,OACdI,SAAUH,EAAMG,YAGoB,CAAEwJ,iBAAeE,SAAOM,iBAAjDlJ,CAAiE6J,IC3O1EG,G,kDAEF,aACC,IAAD,8BACI,gBACKjL,MAAQ,CACTsK,MAAO,GACPC,SAAU,GACVxK,OAAQ,IAEZ,EAAK6G,SAAW,EAAKA,SAAS3B,KAAd,iBAChB,EAAK4B,SAAW,EAAKA,SAAS5B,KAAd,iBARpB,E,qDAWA,WAIQ9C,KAAKT,MAAMvB,SAAST,YACpByC,KAAKT,MAAM0F,QAAQrB,KAAK,gB,uCAIhC,SAA0BuB,GAIlBA,EAAUnH,SAAST,YACnByC,KAAKT,MAAM0F,QAAQrB,KAAK,cAIxBuB,EAAUvH,QACVoC,KAAKyC,SAAS,CAAE7E,OAAQuH,EAAUvH,W,sBAK1C,SAASsD,GAELA,EAAEE,iBACF,IAAMuG,EAAe,CACjBQ,MAAOnI,KAAKnC,MAAMsK,MAClBC,SAAUpI,KAAKnC,MAAMuK,UAGzBpI,KAAKT,MAAMmI,MAAMC,K,sBAGrB,SAASzG,GAELlB,KAAKyC,SAAL,gBAAiBvB,EAAEkE,OAAOC,KAAOnE,EAAEkE,OAAOE,U,oBAG9C,WACC,IACW1H,EAAWoC,KAAKnC,MAAhBD,OACR,OACI,qBAAKqC,UAAU,QAAf,SACI,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,kBAAf,UAEI,oBAAIA,UAAU,kCAAd,oBAEA,sBAAKA,UAAU,iBAAf,UACI,mBAAGA,UAAU,qCAEb,uBAAMyE,SAAU1E,KAAK0E,SAArB,UAEI,kCAEI,6BACI,6BACA,sBAAKzE,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBAAwB,CAAC,aAAclD,EAAOuK,QAElDpH,YAAY,gBACZsE,KAAK,QACLC,MAAOtF,KAAKnC,MAAMsK,MAClB1D,SAAUzE,KAAKyE,WAElB7G,EAAOuK,OACJ,qBAAKlI,UAAU,mBAAf,SACKrC,EAAOuK,eAOxB,6BACI,6BACA,sBAAKlI,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBAAwB,CAAC,aAAclD,EAAOwK,WAElDrH,YAAY,WACZsE,KAAK,WACLC,MAAOtF,KAAKnC,MAAMuK,SAClB3D,SAAUzE,KAAKyE,WAElB7G,EAAOwK,UACJ,qBAAKnI,UAAU,mBAAf,SACKrC,EAAOwK,qBAQ5B,qBAAKnI,UAAU,6BAAf,SACI,uBACIlC,KAAK,SACLkC,UAAU,+BACVqF,MAAM,gC,GAzH1BvG,aAiJTD,gBALS,SAACjB,GAAD,MAAY,CAChCG,SAAUH,EAAMG,SAChBJ,OAAQC,EAAMD,UAGsB,CAAE8J,UAA3B5I,CAAoCgK,ICvJpC,OAA0B,0CCOnCC,G,4JACF,WACI/I,KAAKT,MAAMyJ,SACX5K,OAAO6K,SAASC,KAAO,M,oBAG3B,WAAU,IA4CFC,EA5CC,EACwBnJ,KAAKT,MAAMvB,SAAhCT,EADH,EACGA,WAAYC,EADf,EACeA,KAEd4L,EACF,iCACI,oBAAInJ,UAAU,WAAd,SACA,cAAC,IAAD,CAAMT,GAAG,uBAAuBS,UAAU,WAA1C,SACSzC,EAAK2K,UAGd,oBAAIlI,UAAU,WAAd,SACI,cAAC,IAAD,CAAMT,GAAG,aAAaS,UAAU,WAAhC,yBAIJ,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CAAMT,GAAG,gBAAgBS,UAAU,WAAnC,4BAKJ,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,WAAW2C,QAAS5C,KAAKgJ,OAAOlG,KAAK9C,MAArD,yBAONqJ,EACF,iCACI,oBAAIpJ,UAAU,WAAd,SACI,cAAC,IAAD,CAAMT,GAAG,eAAeS,UAAU,WAAlC,uBAIJ,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CAAMT,GAAG,SAASS,UAAU,WAA5B,wBAeZ,OALIkJ,EADA5L,GAAcC,EACA4L,EAEAC,EAId,+BACI,qBAAKpJ,UAAU,iBAAf,SACI,qBAAKA,UAAU,gBAAf,SACI,qBAAIA,UAAU,WAAd,UACI,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CAAMT,GAAG,IAAT,SACI,qBACIuD,MAAO,CACHuF,WAAY,QACZgB,cAAe,QACfC,OAAQ,qBACRC,MAAO,QAEXtJ,IAAKuJ,SAIhBN,e,GA5ERpK,aA8FND,gBAJS,SAACjB,GAAD,MAAY,CAChCG,SAAUH,EAAMG,YAGoB,CAAEgL,ON1CpB,kBAAM,SAAAzH,GACxBqG,aAAa8B,WAAW,YACxBvC,IAAY,GACZ5F,EAAS,CACLxD,KAAMlB,EACNa,QAAS,QMqCFoB,CAAqCiK,ICrGrC,ICGqBhK,YDHrB,IAA0B,2CEOnC4K,G,uKAEF,WAIQ3J,KAAKT,MAAMvB,SAAST,YACpByC,KAAKT,MAAM0F,QAAQrB,KAAK,gB,oBAIhC,WAEI,OACI,qBAAK3D,UAAU,UAAf,SACI,qBAAKA,UAAU,wCAAf,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,MAAM8C,MAAS,CAAC6G,UAAU,SAAStB,WAAW,MAAOiB,OAAO,QAA3E,UACI,sBAAKtJ,UAAU,uBAAf,UACI,oBAAIA,UAAU,iBAAiB8C,MAAO,CAAC8G,SAAU,QAAjD,SACI,qBAAK3J,IAAK4J,GAAe/G,MAAO,CAAC8G,SAAU,YAE/C,oBAAI9G,MAAS,CAAC6G,UAAU,QAAxB,SAAiC,wBAAQ7G,MAAO,CAACyF,WAAW,gBAAiBuB,SAAS,QAArD,6EAErC,sBAAK9J,UAAU,uBAAuB8C,MAAO,CAACuF,WAAW,MAAzD,UACI,qBAAKvF,MAAS,CAACuF,WAAW,MAA1B,SACI,cAAC,IAAD,CACIrI,UAAU,iEACVT,GAAG,SAFP,sBAOJ,qBAAKuD,MAAS,CAACuF,WAAW,MAA1B,SACI,cAAC,IAAD,CACIrI,UAAU,mEACVT,GAAG,eAFP,uC,GAlCdT,aA0DPD,gBAJS,SAACjB,GAAD,MAAY,CAChCG,SAAUH,EAAMG,YAGLc,CAAyB6K,IC9DnBK,G,kDAEjB,WAAazK,GAAQ,IAAD,8BAChB,cAAMA,IACD1B,MAAQ,CACTsE,QAAS,EAAK5C,MAAM4C,SAHR,E,0CAOpB,WAEI,IAAIQ,EAAc,cAAC,IAAD,CAAMnD,GAAG,aAAaS,UAAU,qBAAhC,kBAElB,OACI,qBAAK8C,MAAO,CAACV,QAAS,SAAtB,SACI,sBAAKpC,UAAU,gBAAf,UACI,sBAAKA,UAAU,eAAe8C,MAAO,CAAEX,gBAAiB,WAAxD,UACI,oBAAInC,UAAU,oBAAd,2BACC0C,KAEL,mBAAG1C,UAAU,aAAb,wF,GApBgClB,aCHrC,OAA0B,gDCA1B,OAA0B,iDCA1B,OAA0B,iDCmE1BkL,G,4JAxDX,WAAS,IAAD,EACJ,OACI,iCAEA,mBAAGhK,UAAU,mCAAb,gCAEA,wBAAO8C,MAAO,CAACmH,WAAY,eAAgBC,YAAa,eAAgBX,MAAO,QAA/E,UACI,+BACI,oBAAIvJ,UAAU,uBAAd,SACI,cAAC,IAAD,CAAMT,GAAG,iBAAT,SACI,qBAAKU,IAAKkK,GAAYnK,UAAU,gCAGxC,oBAAIA,UAAU,uBAAd,SACI,cAAC,IAAD,CAAMT,GAAG,kBAAT,SACI,qBAAKU,IAAKmK,GAAapK,UAAU,gCAGzC,oBAAIA,UAAU,uBAAd,SACI,cAAC,IAAD,CAAMT,GAAG,kBAAT,SACI,qBAAKU,IAAKoK,GAAarK,UAAU,mCAI7C,+BACI,6BACI,cAAC,KAAD,GAAMT,GAAG,kBAAT,oBAA6B,kBAA7B,2BAAwD,0BAAxD,0BACI,qBAAKS,UAAU,wBAAf,qBADJ,MAMJ,6BACI,cAAC,IAAD,CAAMT,GAAG,kBAAkBS,UAAU,yBAArC,SACI,qBAAKA,UAAU,wBAAf,yBAKR,6BACI,cAAC,IAAD,CAAMT,GAAG,kBAAkBS,UAAU,yBAArC,SACI,qBAAKA,UAAU,wBAAf,iD,GA5CIlB,aCNXwL,G,4JACjB,WACI,OACI,4B,GAH+BxL,aCMrCyL,G,kDACF,aAAe,IAAD,8BACV,gBAEK3M,MAAQ,CACTsK,MAAO,GACPC,SAAU,GACVhI,UAAW,GACXC,SAAU,GACVC,eAAgB,GAChBC,aAAc,GACd3C,OAAQ,IAIZ,EAAK6G,SAAW,EAAKA,SAAS3B,KAAd,iBAChB,EAAK4B,SAAW,EAAKA,SAAS5B,KAAd,iBAfN,E,qDAkBd,WAGI,IAAMtC,EAASR,KAAKT,MAAMvB,SAASR,KAAKgD,OACxCR,KAAKT,MAAMkL,eAAejK,EAAQR,KAAKT,MAAM0F,W,uCAGjD,SAA0BE,GAClBA,EAAUvH,QACVoC,KAAKyC,SAAS,CAAE7E,OAAQuH,EAAUvH,SAFL,MAa7BoC,KAAKT,MAAMnC,YAAYA,YALvB+K,EAR6B,EAQ7BA,MACA/H,EAT6B,EAS7BA,UACAC,EAV6B,EAU7BA,SACAC,EAX6B,EAW7BA,eACAC,EAZ6B,EAY7BA,aAGJP,KAAKyC,SAAS,CACV0F,QACA/H,YACAC,WACAC,iBACAC,mB,6DAKR,WAAeW,GAAf,iBAAAM,EAAA,yDACIN,EAAEE,iBAEIiH,EAAY,CACdF,MAAOnI,KAAKmI,MACZC,SAAUpI,KAAKoI,SACfhI,UAAWJ,KAAKI,UAChBC,SAAUL,KAAKK,SACfC,eAAgBN,KAAKM,eACrBC,aAAcP,KAAKO,aACnB3C,OAAQ,IAINqI,EAAiB+B,GAAaK,GACM,GAAtCnC,OAAOC,KAAKF,GAAgBrF,OAfpC,uBAiBQZ,KAAKyC,SAAS,CAAE7E,OAAQqI,IAjBhC,0CAsBUjG,KAAKT,MAAMiI,cAAca,EAAW,SAAUrI,KAAKT,MAAM0F,QAASjF,KAAKT,MAAMmI,OAtBvF,OAwBQxB,OAAOC,KAAKnG,KAAKnC,MAAMD,QAAQgD,OAxBvC,gD,6EA8BA,SAASM,GACLlB,KAAKyC,SAAL,gBAAiBvB,EAAEkE,OAAOC,KAAOnE,EAAEkE,OAAOE,U,oBAG9C,WAAU,IACE1H,EAAWoC,KAAKnC,MAAhBD,OACR,OACI,qBAAKqC,UAAU,WAAf,SACI,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UAEI,qBACIA,UAAU,YACV8C,MAAO,CAAEuF,WAAY,QAGzB,oBAAIrI,UAAU,kCAAd,0BAIA,sBAAKA,UAAU,iBAAf,UACI,mBAAGA,UAAU,mCAAb,+BAIA,uBAAMyE,SAAU1E,KAAK0E,SAArB,UAEI,kCAEI,6BACI,oBAAIzE,UAAU,oBAAd,SACI,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBACA,CACI,aACIlD,EAAOuK,QAGnBpH,YAAY,gBACZsE,KAAK,QACLC,MAAOtF,KAAKnC,MAAMsK,MAClB1D,SAAUzE,KAAKyE,WAElB7G,EAAOuK,OACJ,qBAAKlI,UAAU,mBAAf,SACKrC,EAAOuK,eAiC5B,+BACI,oBAAIlI,UAAU,oBAAd,SACI,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBACA,CACI,aACIlD,EAAOwC,YAGnBW,YAAY,aACZsE,KAAK,YACLC,MACItF,KAAKnC,MAAMuC,UAEfqE,SAAUzE,KAAKyE,WAElB7G,EAAOwC,WACJ,qBAAKH,UAAU,mBAAf,SACKrC,EAAOwC,iBAKxB,oBAAIH,UAAU,oBAAd,SACI,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBACA,CACI,aACIlD,EAAOyC,WAGnBU,YAAY,YACZsE,KAAK,WACLC,MACItF,KAAKnC,MAAMwC,SAEfoE,SAAUzE,KAAKyE,WAElB7G,EAAOyC,UACJ,qBAAKJ,UAAU,mBAAf,SACKrC,EAAOyC,mBAO5B,+BACI,oBAAIJ,UAAU,oBAAd,SACI,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBACA,CACI,aACIlD,EAAO0C,iBAGnBS,YAAY,iBACZsE,KAAK,iBACLC,MACItF,KAAKnC,MAAMyC,eAEfmE,SAAUzE,KAAKyE,WAElB7G,EAAO0C,gBACJ,qBAAKL,UAAU,mBAAf,SACKrC,EAAO0C,sBAKxB,oBAAIL,UAAU,oBAAd,SACI,sBAAKA,UAAU,aAAf,UACI,uBACIlC,KAAK,OACLkC,UAAWa,KACP,uBACA,CACI,aACIlD,EAAO2C,eAGnBQ,YAAY,gBACZsE,KAAK,eACLC,MACItF,KAAKnC,MAAM0C,aAEfkE,SAAUzE,KAAKyE,WAElB7G,EAAO2C,cACJ,qBAAKN,UAAU,mBAAf,SAEQrC,EAAO2C,0BASnC,qBAAKN,UAAU,6BAAf,SACI,uBACIlC,KAAK,SACLkC,UAAU,+BACVqF,MAAM,wC,GApRhBvG,aAgTnBD,gBANS,SAACjB,GAAD,MAAY,CAChCT,YAAaS,EAAMT,YACnBY,SAAUH,EAAMG,SAChBJ,OAAQC,EAAMD,UAGsB,CAAE4J,iBAAeiD,erB9R3B,SAACnJ,EAAI2D,GAAL,8CAAiB,WAAM1D,GAAN,eAAAC,EAAA,+EAErBC,IAAMC,IAAN,uBAA0BJ,IAFL,OAEjCK,EAFiC,OAGvCJ,EAAS,CACLxD,KAAMf,EACNU,QAASiE,EAAIC,OALsB,gDAQvCqD,EAAQrB,KAAK,cAR0B,yDAAjB,uDqB8R2CoE,iBAA1DlJ,CAA0E0L,ICvP1EE,G,4JApCb,WAEE,OACE,cAAC,IAAD,CAAUpM,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,sBAAK2B,UAAU,MAAf,UACE,cAAC,GAAD,IACA,uBAAM8C,MAAO,CAACmH,WAAY,OAAQC,YAAa,QAA/C,UAIE,cAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAI5L,UAAW2K,KACjC,cAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,eAAe5L,UAAWiL,KAC5C,cAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,SAAS5L,UAAW6L,KACtC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,kBAAkB5L,UAAWyJ,KAC/C,cAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,iBAAiB5L,UAAWkJ,KAC9C,cAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,kBAAkB5L,UAAW2J,KAC/C,cAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,gBAAgB5L,UAAW0B,KAK7C,cAAC,EAAD,CAAciK,OAAK,EAACC,KAAK,uBAAuBE,kBAAmB,CAAC,MAAO,OAAQ9L,UAAWwL,KAC9F,cAAC,EAAD,CAAgBG,OAAK,EAACC,KAAK,eAC3B,cAAC,EAAD,CAAcD,OAAK,EAACC,KAAK,gCAAgC3L,kBAAmB,CAAC,MAAO,OAAQD,UAAWkE,KACvG,cAAC,EAAD,CAAcyH,OAAK,EAACC,KAAK,QAAQ5L,UAAWuL,KAC5C,cAAC,EAAD,CAAcI,OAAK,EAACC,KAAK,qBAAqB5L,UAAWgL,mB,GA5BrDjL,aCfHgM,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASlM,OACP,cAAC,IAAMmM,WAAP,UACE,cAAC,GAAD,MAEFlG,SAASmG,eAAe,SAM1BX,O","file":"static/js/main.4b514e9c.chunk.js","sourcesContent":["export const GET_ERRORS = \"GET_ERRORS\";\r\n\r\n//User search actions\r\nexport const GET_MANY_DOCTORS = \"GET_MANY_DOCTORS\";\r\nexport const GET_ONE_DOCTOR = \"GET_ONE_DOCTOR\";\r\n\r\n//User login\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\n//Appointment scheduling\r\nexport const GET_ONE_APPOINTMENT = \"GET_ONE_APPOINTMENT\";\r\nexport const GET_MANY_APPOINTMENTS = \"GET_MANY_APPOINTMENTS\";\r\n\r\n//Profile viewing\r\nexport const GET_CURRENT_USER = \"GET_CURRENT_USER\";","import { GET_ERRORS } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\n/**\r\n * Significant credit to Agile Intelligence: https://github.com/AgileIntelligence/AgileIntPPMTool/\r\n */\r\nexport default function(state = initialState, action) {\r\n    switch (action.type)\r\n    {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import {GET_MANY_DOCTORS, GET_ONE_DOCTOR} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    allDoctors: [],\r\n    doctor: {}\r\n}\r\n\r\n\r\nexport default function(state = initialState, action)\r\n{\r\n    switch (action.type)\r\n    {\r\n        case GET_MANY_DOCTORS:\r\n            return {\r\n                ...state,\r\n                allDoctors: action.payload\r\n            }\r\n        case GET_ONE_DOCTOR:\r\n            return {\r\n                ...state,\r\n                doctor: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_CURRENT_USER} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    currentUser: {}\r\n}\r\n\r\n\r\nexport default function(state = initialState, action)\r\n{\r\n    switch (action.type)\r\n    {\r\n        case GET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                currentUser: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {GET_MANY_APPOINTMENTS, GET_ONE_APPOINTMENT} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    allAppointments: [],\r\n    appointment: {}\r\n}\r\n\r\n\r\nexport default function(state = initialState, action)\r\n{\r\n    switch (action.type)\r\n    {\r\n        case GET_MANY_APPOINTMENTS:\r\n            return {\r\n                ...state,\r\n                allAppointments: action.payload\r\n            }\r\n        case GET_ONE_APPOINTMENT:\r\n            return {\r\n                ...state,\r\n                appointment: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_CURRENT_USER } from \"../actions/types\";\r\n\r\n/**\r\n * Significant credit to Agile Intelligence: https://github.com/AgileIntelligence/AgileIntPPMTool/\r\n */\r\n\r\n//Default state is not logged in\r\n//so no token yet\r\nconst initialState = {\r\n    validToken: false,\r\n    user: {}\r\n};\r\n\r\n//Check if the payload exists\r\nconst booleanActionPayload = payload => {\r\n    if (payload) {\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport default function(state = initialState, action) \r\n{\r\n    switch (action.type) \r\n    {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                validToken: booleanActionPayload(action.payload),\r\n                user: action.payload\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport errorReducer from \"./errorReducer\";\r\nimport doctorReducer from \"./doctorReducer\";\r\nimport currentUserReducer from \"./currentUserReducer\";\r\nimport appointmentReducer from \"./appointmentReducer\";\r\nimport securityReducer from \"./securityReducer\";\r\n\r\n/**\r\n * Use this version of the index to manage Redux store variables\r\n */\r\nexport default combineReducers({\r\n    errors: errorReducer,\r\n    doctor: doctorReducer,\r\n    currentUser: currentUserReducer,\r\n    appointment: appointmentReducer,\r\n    security: securityReducer\r\n});","import {createStore, applyMiddleware, compose} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\n/**\r\n * Significant credit for this file to Agile Intelligence: https://github.com/AgileIntelligence/AgileIntPPMTool/\r\n */\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nlet store;\r\nconst ReactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\n\r\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools)\r\n{\r\n    store = createStore(\r\n        rootReducer, \r\n        initialState,\r\n        compose(\r\n            applyMiddleware(...middleware),\r\n            ReactReduxDevTools\r\n        )\r\n    );\r\n}\r\nelse\r\n{\r\n    store = createStore(rootReducer, initialState, compose(applyMiddleware(...middleware)));\r\n}\r\n\r\n\r\nexport default store;","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * The SecuredRoute object shows either the target component or the login screen\r\n * if the user is not signed in (because their token is invalid).\r\n * Significant credit to Agile Intelligence: https://github.com/AgileIntelligence/AgileIntPPMTool/\r\n * for the token validation.\r\n */\r\nexport function SecuredRoute({ component: Component, security, userTypeBlacklist, ...otherProps })\r\n{\r\n    //Check if the user is not allowed on this page\r\n    if (userTypeBlacklist != undefined)\r\n    {\r\n        //If the user's type is not allowed to access this component\r\n        //because it is passed in the blaclist array...\r\n        if (userTypeBlacklist.indexOf(security.user.userType) > -1)\r\n        {\r\n            //Redirect the user\r\n            return <Route {...otherProps} render={(props) => <Redirect to=\"/permission-denied\"/>} />\r\n        }\r\n    }\r\n\r\n    //Show either the component or the login form\r\n    return <Route\r\n        {...otherProps} /* pass the path and other props */\r\n        render={(props) =>\r\n            /* First, check if the user type is correct */\r\n            security.validToken === true ? (\r\n                /* Show target component */\r\n                <Component {...props} />\r\n            ) : (\r\n                /* If token is invalid or non-existent, show login component */\r\n                <Redirect to=\"/login\" />\r\n            )\r\n        }\r\n    />\r\n}\r\n\r\nSecuredRoute.propTypes = {\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps)(SecuredRoute);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\n\r\nclass Dashboard extends Component\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Welcome to the Doctor Dashboard</h1>\r\n                <p>{/*this.props.security.user.userType*/}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDashboard.propTypes = {\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Dashboard);","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\n\r\nclass Dashboard extends Component\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Welcome to the Patient Dashboard</h1>\r\n                <p>{/*this.props.security.user.userType*/}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDashboard.propTypes = {\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Dashboard);","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\n\r\nclass Dashboard extends Component\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Welcome to the Insurer Dashboard</h1>\r\n                <p>{/*this.props.security.user.userType*/}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDashboard.propTypes = {\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Dashboard);","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport DoctorDashboard from \"../components/Dashboards/DoctorDashboard\";\r\nimport PatientDashboard from \"../components/Dashboards/PatientDashboard\";\r\nimport InsurerDashboard from \"../components/Dashboards/InsurerDashboard\";\r\nimport { DOC, PAT, INS } from \"../actions/userRoles\";\r\n\r\n\r\n/**\r\n * Shows the correct dashboard component based on the user's role\r\n */\r\nexport function DashboardRoute({security, ...otherProps})\r\n{\r\n    var outputDashboard = null;\r\n    switch (security.user.userType) \r\n    {\r\n        case DOC:\r\n            outputDashboard = DoctorDashboard;\r\n            break;\r\n        case PAT:\r\n            outputDashboard = PatientDashboard;\r\n            break;\r\n        case INS:\r\n            outputDashboard = InsurerDashboard;\r\n            break;\r\n    }\r\n\r\n    return <Route\r\n        {...otherProps} /* pass the path and other props */\r\n        component={outputDashboard}\r\n    />\r\n}\r\n\r\nDashboardRoute.propTypes = {\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps)(DashboardRoute);","export const DOC = \"DOC\";\r\nexport const PAT = \"PAT\";\r\nexport const INS = \"INS\";","export default __webpack_public_path__ + \"static/media/defaultProfileIcon.f0d7bc03.png\";","import React, { Component } from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {PropTypes} from \"prop-types\";\r\nimport defaultProfileIcon from \"../../static/defaultProfileIcon.png\";\r\nimport { connect } from \"react-redux\";\r\n\r\nvar MakeAppointmentButton = null;\r\n\r\nclass DoctorCard extends Component \r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        //Only show a MakeAppointmentButton if the user is a patient\r\n        const userType = this.props.userType;\r\n        if (userType == \"PAT\")\r\n        {\r\n            MakeAppointmentButton = \r\n                (<button className=\"col my-1 button-primary button-card\">\r\n                    Make Appointment\r\n                </button>)\r\n        }\r\n    }\r\n\r\n    render() \r\n    {\r\n        const {doctor} = this.props;\r\n        return (\r\n            <div className=\"container\">\r\n            <div className=\"card card-body bg-light mb-3\">\r\n                <div className=\"row align-items-center\">\r\n                    <div className=\"col-3\">\r\n                        <img className=\"col mh-25\" src={defaultProfileIcon} />\r\n                    </div>\r\n                    <div className=\"col-6 text-left\">\r\n                        <h3>{doctor.firstName}{\" \"}{doctor.lastName}</h3>\r\n                        <h4>{doctor.specialization}</h4>\r\n                        <h4>{doctor.hospitalName}</h4>\r\n                    </div>\r\n                    <div className=\"col-3 justify-content-end\">\r\n                        <Link to={`/schedule-appointment/${doctor.userId}`}>\r\n                            {MakeAppointmentButton}\r\n                        </Link>\r\n                        <Link to={`/account/${doctor.userId}`}>\r\n                            <button className=\"col my-1 button-secondary card-button\">\r\n                                View Profile\r\n                            </button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DoctorCard;","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { getAllDoctors } from \"../../actions/userActions\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport DoctorCard from \"./DoctorCard\";\r\nimport classnames from \"classnames\";\r\n\r\nvar noDoctorsMessage = null;\r\n\r\nclass DoctorSearch extends Component \r\n{\r\n    componentDidMount() //When the component loads (life cycle method)\r\n    {\r\n        this.props.getAllDoctors();\r\n\r\n        //Display a message if there are no doctors\r\n        if (this.props.doctor.length === 0)\r\n        {\r\n            noDoctorsMessage = (\r\n                <div className=\"alert alert-info text-center\" role=\"alert\">\r\n                    It looks like no doctors could be found...\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {allDoctors} = this.props.doctor;\r\n\r\n        return (\r\n            <div className=\"doctorContainer\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <h1 className=\"display-4 text-left page-header\">Find Doctors</h1>\r\n                            \r\n                            <div className=\"row align-items-center\">\r\n                                <div className=\"col-10\">\r\n                                    <input \r\n                                    className={classnames(\"form-control\")}\r\n                                    placeholder=\"Search by keywords...\"\r\n                                    rows=\"1\"\r\n                                    onKeyPress={e => {\r\n                                        if(e.key === 'Enter')\r\n                                            e.preventDefault()\r\n                                        }}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"col-2 justify-content-end\">\r\n                                    <button type=\"submit\" className=\"button-card button-primary\">\r\n                                        Search\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <br />\r\n                            \r\n                            <br />\r\n                            {/* Get the entire list of doctors. For each DoctorCard, set its prop as the doctor data */}\r\n                            {/* Also, attach the user type (PAT, DOC, INS) so only patients can see relevant options */}\r\n                            {allDoctors.map(doctor => (\r\n                                <DoctorCard key={doctor.id} doctor={doctor} userType={this.props.security.user.userType} />\r\n                            ))}\r\n                            {noDoctorsMessage}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n//Set up methods to retrieve doctors from the database\r\nDoctorSearch.propTypes = {\r\n    doctor: PropTypes.object.isRequired,\r\n    getAllDoctors: PropTypes.func.isRequired,\r\n    security: PropTypes.object.isRequired\r\n} \r\n\r\n//Add the actual doctor state/data to the list of doctors on the page\r\nconst mapStateToProps = state => ({\r\n    doctor: state.doctor,\r\n    security: state.security\r\n})\r\n\r\nexport default connect(mapStateToProps, {getAllDoctors}) (DoctorSearch);","import axios from \"axios\";\r\nimport { GET_ERRORS, GET_MANY_DOCTORS, GET_ONE_DOCTOR, GET_CURRENT_USER } from \"./types\";\r\n\r\nexport const getAllDoctors = () => async dispatch => {\r\n    const res = await axios.get(\"/api/account/all-doctors\");\r\n    dispatch ({\r\n        type: GET_MANY_DOCTORS,\r\n        payload: res.data\r\n    });\r\n}\r\n\r\n\r\n//Get doctor (used for AppointmentScheduler)\r\nexport const getDoctor = (id, history) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`/api/account/${id}`);\r\n        dispatch({\r\n            type: GET_ONE_DOCTOR,\r\n            payload: res.data\r\n        })\r\n    } catch (error) {\r\n        history.push(\"/dashboard\");\r\n    }\r\n}\r\n\r\n//Get current user's profile information\r\nexport const getCurrentUser = (id, history) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`/api/account/${id}`);\r\n        dispatch({\r\n            type: GET_CURRENT_USER,\r\n            payload: res.data\r\n        })\r\n    } catch (error) {\r\n        history.push(\"/dashboard\");\r\n    }\r\n}","import axios from \"axios\";\r\nimport { GET_MANY_APPOINTMENTS, GET_ERRORS } from \"./types\";\r\n\r\nexport const createAppointment = (appointment, doctorId, history) => async dispatch => \r\n{\r\n    try {\r\n        await axios.post(`/api/appointments/create-appointment/${doctorId}`, appointment);\r\n        dispatch(\r\n        {\r\n            type: GET_ERRORS,\r\n            //Clear the errors for the next use of the appointment scheduler\r\n            payload: {} \r\n        });\r\n    }\r\n    catch (err)\r\n    {\r\n        dispatch(\r\n        {\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n};\r\n\r\nexport const getAppointmentsByDoctorId = (doctorId) => async dispatch => {\r\n    const res = await axios.get(`/api/appointments/get-by-doctor/${doctorId}`);\r\n    dispatch ({\r\n        type: GET_MANY_APPOINTMENTS,\r\n        payload: res.data\r\n    });\r\n}\r\n\r\nexport const validateAppointment = (appointment) => {\r\n    const errorOutput = {};\r\n    //Check if date is blank\r\n    if (appointment[\"date\"] === null || appointment[\"date\"] === \"\")\r\n    {\r\n        errorOutput[\"date\"] = \"Select a time from the table →\";\r\n    }\r\n    //Check if date is in the past\r\n    else if (appointment[\"date\"].getTime() <= (new Date()).getTime())\r\n    {\r\n        errorOutput[\"date\"] = \"You can't schedule an appointment in the past\";\r\n    }\r\n    //Check if the date is in the future\r\n    return errorOutput;\r\n}","import React, { Component } from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst SUCCESS_COLOR = \"#5cb85c\";\r\nconst WARNING_COLOR = \"#d62b00\";\r\n\r\nexport default class CustomPopup extends Component \r\n{\r\n    constructor (props) {\r\n        super(props)\r\n        //Receive the text to place in the popup body\r\n        //and hide the popup\r\n        this.state = {\r\n            headerText: this.props.content,\r\n            content: this.props.content,\r\n            backgroundColor: SUCCESS_COLOR,\r\n            display: \"none\", /* Style which dictates if the modal is \"block\" (shown) or \"none\" (hidden) */\r\n            redirect: this.props.redirect, /* Where to take the user after they click the close button */\r\n            /* ...Pass null for redirect if no redirect is needed*/\r\n        }\r\n\r\n        //Set a custom color if the popup indicates a warning rather than success\r\n        if (this.props.isWarning == true)\r\n        {\r\n            this.state.backgroundColor = WARNING_COLOR;\r\n        }\r\n    }\r\n\r\n    \r\n    //Customize the header\r\n    setHeaderText(inputString) {\r\n        this.setState({headerText: inputString});\r\n    }\r\n    //Customize the message\r\n    setContent(inputString) {\r\n        this.setState({content: inputString});\r\n    }\r\n    //Customize the redirect page\r\n    setRedirect(inputLink) {\r\n        this.setState({redirect: inputLink});\r\n    }\r\n    //Show the modal\r\n    show() {\r\n        this.setState({display: \"block\"});\r\n    }\r\n    //Close the modal\r\n    hide() {\r\n        this.setState({display: \"none\"});\r\n    }\r\n\r\n    render() \r\n    {\r\n        //When the user clicks on <span> (x), close the modal or redirect the user\r\n        var closeButton;\r\n        if (this.state.redirect != null) {\r\n            //Redirect the user version\r\n            closeButton = <Link to={`${this.state.redirect}`} className=\"modal-close-button\" onClick={this.hide.bind(this)}>&times;</Link>\r\n        }\r\n        else {\r\n            //Only close the modal version\r\n            closeButton = <span className=\"modal-close-button\" onClick={this.hide.bind(this)}>&times;</span>\r\n        }\r\n\r\n        const {display} = this.state;\r\n        return (\r\n            <div className=\"modal-scrim\" style={{display: display}}>\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\" style={{ backgroundColor: this.state.backgroundColor }}>\r\n                        <h2 className=\"modal-header-text\">{this.state.headerText}</h2>\r\n                        {closeButton}\r\n                    </div>\r\n                    <p className=\"modal-body\">{this.state.content}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\"\r\nimport classnames from \"classnames\";\r\nimport { getDoctor } from \"../actions/userActions\";\r\nimport {createAppointment, getAppointmentsByDoctorId, validateAppointment} from \"../actions/appointmentActions\";\r\nimport CustomPopup from './CustomPopup';\r\n\r\nvar dateFormat = require(\"dateformat\");\r\n//Inclusive start/stop times that doctors will work between\r\nconst startTimeHours = 8;\r\nconst endTimeHours = 17;\r\nconst minuteDuration = 30;\r\n\r\nclass AppointmentScheduler extends Component \r\n{\r\n    constructor() \r\n    {\r\n        super();\r\n        this.state = {\r\n            date: \"\", /* Stores the month, day, and year temporarily */\r\n            time: null, /* Stores the actual date and time selection */ \r\n            formattedDate: dateFormat(new Date(), \"mm/dd/yyyy\"),\r\n            formattedTime: \"Not Selected\",\r\n            appointmentTable: <span>Loading appointments...</span>,\r\n            errors: {}\r\n        };\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.successPopup = React.createRef();\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        //Get the doctor id from the URL\r\n        const {userId} = this.props.match.params;\r\n        //Select the doctor from the database again\r\n        this.props.getDoctor(userId, this.props.history);\r\n\r\n        //Get the doctor's current list of appointments to find which are taken\r\n        this.props.getAppointmentsByDoctorId(userId);\r\n        this.generateAppointmentTable(new Date());\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) \r\n    {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    onChange(e) \r\n    {\r\n        //Update the state when the user updates any form field\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        if (e.target.name === \"date\")\r\n        {\r\n            //Get the date object from the input element\r\n            var selectedDate = document.querySelector('#datePicker').valueAsDate;\r\n            selectedDate.setDate(selectedDate.getDate()+1); //fix strange behavior of date picker\r\n            \r\n            //Update the date text field\r\n            var formattedDate = dateFormat(selectedDate, \"mm/dd/yyyy\");\r\n            this.setState({formattedDate: formattedDate})\r\n\r\n            //Update the selected date/time for the appointment in the state\r\n            var time = this.state.time;\r\n            if (time != null)\r\n            {\r\n                time.setFullYear(selectedDate.getFullYear());\r\n                time.setMonth(selectedDate.getMonth());\r\n                time.setDate(selectedDate.getDate());\r\n            }\r\n\r\n            //Show a new appointment table based on the target date\r\n            this.generateAppointmentTable(selectedDate);\r\n        }\r\n    }\r\n\r\n    onSubmit(e)\r\n    {\r\n        e.preventDefault(); //prevent page refresh\r\n        //Create appointment\r\n        var appointment = {\r\n            date: this.state.time,\r\n        }\r\n        var doctorId = this.props.doctor.doctor.userId;\r\n    \r\n        //Validate the appointment\r\n        const frontEndErrors = validateAppointment(appointment);\r\n        if (Object.keys(frontEndErrors).length != 0) //if errors exist\r\n        {\r\n            this.setState({ errors: frontEndErrors });\r\n            return;\r\n        }\r\n\r\n        //Send appointment to backend for persistence\r\n        this.props.createAppointment(appointment, doctorId, this.props.history);\r\n\r\n        //Show success popup message\r\n        this.successPopup.current.setContent(\r\n            \"Appointment successfully scheduled with \"+this.props.doctor.doctor.firstName+\" \"+this.props.doctor.doctor.lastName+\" on \"+this.state.formattedDate+\r\n            \" at \"+this.state.formattedTime);\r\n        this.successPopup.current.show();\r\n    }\r\n\r\n    \r\n    generateAppointmentTable = (selectedDate) => {\r\n        const {allAppointments} = this.props.appointment;\r\n        \r\n        //Set up the appointment availability table\r\n        var dateFormat = require(\"dateformat\");\r\n        \r\n        let tableContent = [];\r\n        //Set initial time for the loop\r\n        let time = selectedDate;\r\n        time.setHours(startTimeHours);\r\n        time.setMinutes(0);\r\n        time.setSeconds(0);\r\n        time.setMilliseconds(0);\r\n\r\n        //Push the table header\r\n        let dayOfWeek = dateFormat(time, \"dddd, mmmm dS\");\r\n        tableContent.push(\r\n            <th className=\"th-appointment\">\r\n                {dayOfWeek}\r\n            </th>\r\n        );\r\n\r\n        //Build a table of available time intervals\r\n        while (time.getHours() < endTimeHours)\r\n        {\r\n            //Push one row onto the table as a time interval (ex: \"10:30-11:00\")...\r\n            //First, prepare formatted start and stop times\r\n            let appointmentStartTime = dateFormat(time, \"h:MM\");\r\n            time.setMinutes(time.getMinutes()+minuteDuration);\r\n            let appointmentEndTime = dateFormat(time, \"h:MM\");\r\n            time.setMinutes(time.getMinutes()-minuteDuration);\r\n            \r\n            //Check all taken appointments against this time slot.\r\n            //If it matches one of the taken times, mark it as not available.\r\n            var isAvailable = true;\r\n            for (var i = 0; i < allAppointments.length; i++)\r\n            {\r\n                if (new Date(allAppointments[i].date).getTime() == time.getTime())\r\n                {\r\n                    isAvailable = false;\r\n                    i = allAppointments.length; //end loop\r\n                }\r\n            }\r\n            \r\n            if (isAvailable)\r\n            {\r\n                //Add a new open time slot to the table.\r\n                //Note that the data-value field holds the end time in milliseconds.\r\n                //..which is send to handleSelectTime() when the <td> is clicked.\r\n                tableContent.push(\r\n                    <tr>\r\n                        <td onClick={this.handleSelectTime.bind(this)} data-value={(time).getTime()} className=\"td-appointment td-appointment-open\">\r\n                            <span className=\"tooltip-text tooltip-text-left\">Open</span>\r\n                            {appointmentStartTime}{\"-\"}{appointmentEndTime}\r\n                        </td>\r\n                    </tr>\r\n                );\r\n            }\r\n            else\r\n            {\r\n                tableContent.push(\r\n                    <tr>\r\n                        <td className=\"td-appointment td-appointment-taken\">\r\n                            <span className=\"tooltip-text tooltip-text-left\">Closed</span>\r\n                            {appointmentStartTime}{\"-\"}{appointmentEndTime}\r\n                        </td>\r\n                    </tr>\r\n                );\r\n            }\r\n            //Increment the time\r\n            time.setMinutes(time.getMinutes()+minuteDuration);\r\n        }\r\n        \r\n        this.setState({ appointmentTable: tableContent });\r\n    }\r\n\r\n    handleSelectTime(event) \r\n    {\r\n        //Get the UTC millisecond time selected and make it into a Date object\r\n        const selectedTime = event.currentTarget.getAttribute(\"data-value\");\r\n        const selectedTimeObject = new Date();\r\n        selectedTimeObject.setTime(selectedTime);\r\n        \r\n        //Format the time\r\n        const formmattedTime = dateFormat(selectedTimeObject, \"h:MM TT\");\r\n        //Display the formatted time\r\n        this.setState({time: selectedTimeObject, formattedTime: formmattedTime});\r\n    }\r\n\r\n\r\n    render() {\r\n        const {doctor} = this.props.doctor;\r\n        const {userId} = this.props.match.params;  //Get the doctor id from the URL\r\n        const {errors} = this.state;\r\n        \r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                <h1 className=\"display-5 text-left page-header\">Schedule an Appointment</h1>\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <div className=\"row align-items-start\" style={{marginTop: \"calc(4vmin)\"}}>\r\n                            <div className=\"col-md-8\">\r\n\r\n                                {/* Date/time picker*/}\r\n                                <p className=\"text-left page-header\">Select a date for your appointment...</p>\r\n                                <input type=\"date\"\r\n                                className={classnames(\"form-control textbox\",\r\n                                    {\"is-invalid\": errors.date})}\r\n                                name=\"date\"\r\n                                value={this.state.date}\r\n                                onChange={this.onChange}\r\n                                id=\"datePicker\" />\r\n                                {errors.date && (\r\n                                    <div className=\"invalid-feedback\">{errors.date}</div>\r\n                                )} \r\n                            \r\n                                {/* Doctor information */}\r\n                                <div className=\"thin-container\" style={{marginTop: \"1.5em\"}}>\r\n                                    <p className=\"thin-container-title text-center\">Appointment Summary</p>\r\n                                    <p className=\"text-left paragraph\">Doctor: {doctor.firstName}{\" \"}{doctor.lastName}</p>\r\n                                    <p className=\"text-left paragraph\">Date: {this.state.formattedDate}</p>\r\n                                    <p className=\"text-left paragraph\">Time: {this.state.formattedTime}</p>\r\n                                    <p className=\"text-left paragraph\">Hospital: {doctor.hospitalName}</p>\r\n                                </div>\r\n\r\n                                {/*Submit button*/}\r\n                                <div className=\"row justify-content-center\">\r\n                                    <input\r\n                                        type=\"submit\"\r\n                                        className=\"button-submit button-primary\"\r\n                                        value=\"Make Appointment\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-4\">\r\n                                <table>\r\n                                    {this.state.appointmentTable}\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                    \r\n                    <CustomPopup ref={this.successPopup} redirect=\"/dashboard\" headerText=\"Success\" content=\"Appointment scheduled!\"/>\r\n                </div>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nAppointmentScheduler.propTypes = {\r\n    createAppointment: PropTypes.func.isRequired,\r\n    getAppointmentsByDoctorId: PropTypes.func.isRequired,\r\n    validateAppointment: PropTypes.func.isRequired,\r\n    getDoctor: PropTypes.func.isRequired,\r\n    appointment: PropTypes.object.isRequired,\r\n    doctor: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n} \r\n\r\n//Add the actual doctor state/data to the list of doctors on the page\r\nconst mapStateToProps = state => ({\r\n    appointment: state.appointment,\r\n    doctor: state.doctor,\r\n    errors: state.errors\r\n})\r\n\r\nexport default connect(mapStateToProps, {createAppointment, getAppointmentsByDoctorId, getDoctor, validateAppointment}) (AppointmentScheduler);","import axios from \"axios\";\r\n\r\n/**\r\n * Edits the headers sent to any axios request by adding the token value to the \"Authorization\" key.\r\n * Significant credit to Agile Intelligence: https://github.com/AgileIntelligence/AgileIntPPMTool/\r\n */\r\n\r\nconst setJWTToken = token => {\r\n    if (token)\r\n    {\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    }\r\n    else\r\n    {\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setJWTToken;","import axios from \"axios\";\r\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\r\nimport setJWTToken from \"../securityUtils/setJWTToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\n/**\r\n * Significant credit for this file to Agile Intelligence: https://github.com/AgileIntelligence/AgileIntPPMTool/\r\n */\r\n\r\n\r\n//Register the user or show errors \r\nexport const createNewUser = (newUser, userType, history) => async dispatch => {\r\n    try\r\n    {\r\n        await axios.post(\"/api/account/create-\"+userType, newUser);\r\n        dispatch({\r\n            type: GET_ERRORS, \r\n            payload: {} //Clear the errors\r\n        });\r\n    }\r\n    catch (err)\r\n    {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n};\r\n\r\n//Log in and store the JWT token response in the header\r\nexport const login = LoginRequest => async dispatch => {\r\n    try\r\n    {\r\n        //Send a LoginRequest to Spring\r\n        const res = await axios.post(\"/api/account/login\", LoginRequest);\r\n        //Extract JWT token from the response data\r\n        const { token } = res.data;\r\n        //Store the token in the localStorage\r\n        localStorage.setItem(\"jwtToken\", token);\r\n        //Set our token in header ***\r\n        setJWTToken(token);\r\n        //Decode token on React\r\n        const decoded = jwtDecode(token);\r\n        //Dispatch to our securityReducer\r\n        dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n      }\r\n      catch (err)\r\n      {\r\n          dispatch({\r\n              type: GET_ERRORS,\r\n              payload: err.response.data\r\n          });\r\n      }\r\n};\r\n\r\n//Log out and remove the JWT\r\nexport const logout = () => dispatch => {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setJWTToken(false);\r\n    dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: {}\r\n    });\r\n};\r\n\r\n\r\nexport const validateUser = ( user) => {\r\n    const errorOutput = {};\r\n    //Check if the first name or last name contain a number\r\n    if (/\\d/.test(user.firstName))\r\n    {\r\n        errorOutput[\"firstName\"] = \"First name cannot contain numbers\";\r\n    }\r\n    if (/\\d/.test(user.lastName))\r\n    {\r\n        errorOutput[\"lastName\"] = \"Last name cannot contain numbers\";\r\n    }\r\n    return errorOutput;\r\n}","import React, { Component } from \"react\";\r\nimport { createNewUser } from \"../../actions/securityActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\nimport { login, validateUser } from \"../../actions/securityActions\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass DoctorSignupForm extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            specialization: \"\",\r\n            hospitalName: \"\",\r\n            errors: {},\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //Instantly bring the user to their dashboard\r\n        //if they are already logged in\r\n        if (this.props.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    //When submitting, create the doctor\r\n    async onSubmit(e) {\r\n        e.preventDefault();\r\n        //Create a new doctor account\r\n        const newDoctor = {\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n            firstName: this.state.firstName,\r\n            lastName: this.state.lastName,\r\n            specialization: this.state.specialization,\r\n            hospitalName: this.state.hospitalName,\r\n            errors: {},\r\n        };\r\n    \r\n        //Validate the user\r\n        const frontEndErrors = validateUser(newDoctor)\r\n        if (Object.keys(frontEndErrors).length != 0) //if errors exist\r\n        {\r\n            this.setState({ errors: frontEndErrors });\r\n            return;\r\n        }\r\n\r\n        //Send the signup request\r\n        await this.props.createNewUser(newDoctor, \"doctor\", this.props.history, this.props.login);\r\n\r\n        if (Object.keys(this.state.errors).length == 0) //if no errors exist\r\n        {\r\n            //Automatically login\r\n            const LoginRequest = {\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n            };\r\n            await this.props.login(LoginRequest);\r\n            //Navigate to the dashboard\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n        return (\r\n            <div className=\"register\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            {/*Header*/}\r\n                            <div\r\n                                className=\"text-left\"\r\n                                style={{ paddingTop: \"2%\" }}\r\n                            >\r\n                                <Link\r\n                                    to=\"/choose-role\"\r\n                                    style={{ color: \"Green\" }}\r\n                                >\r\n                                    <strong\r\n                                        style={{ fontFamily: \"Titillium Web\" }}\r\n                                    >\r\n                                        &lt; Go back to role selection\r\n                                    </strong>\r\n                                </Link>\r\n                            </div>\r\n                            <h1 className=\"display-4 text-left page-header\">\r\n                                Create an account\r\n                            </h1>\r\n\r\n                            <div className=\"thin-container\">\r\n                                <p className=\"thin-container-title text-center\">\r\n                                    Sign up as Doctor\r\n                                </p>\r\n\r\n                                <form onSubmit={this.onSubmit}>\r\n                                    {/*Column 1*/}\r\n                                    <table>\r\n                                        {/*Row 1*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.email,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"Email address\"\r\n                                                        name=\"email\"\r\n                                                        value={this.state.email}\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.email && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {errors.email}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.password,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"Password\"\r\n                                                        name=\"password\"\r\n                                                        value={\r\n                                                            this.state.password\r\n                                                        }\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.password && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {errors.password}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                        {/*Row 2*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.firstName,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"First name\"\r\n                                                        name=\"firstName\"\r\n                                                        value={\r\n                                                            this.state.firstName\r\n                                                        }\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.firstName && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {errors.firstName}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.lastName,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"Last name\"\r\n                                                        name=\"lastName\"\r\n                                                        value={\r\n                                                            this.state.lastName\r\n                                                        }\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.lastName && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {errors.lastName}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                        {/*Row 3*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.specialization,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"Specialization\"\r\n                                                        name=\"specialization\"\r\n                                                        value={\r\n                                                            this.state.specialization\r\n                                                        }\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.specialization && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {errors.specialization}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.hospitalName,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"Hospital name\"\r\n                                                        name=\"hospitalName\"\r\n                                                        value={\r\n                                                            this.state.hospitalName\r\n                                                        }\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.hospitalName && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {\r\n                                                                errors.hospitalName\r\n                                                            }\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </table>\r\n                                    {/*Submit button*/}\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <input\r\n                                            type=\"submit\"\r\n                                            className=\"button-submit button-primary\"\r\n                                            value=\"Create Account\"\r\n                                        />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDoctorSignupForm.propTypes = {\r\n    createNewUser: PropTypes.func.isRequired,\r\n    login: PropTypes.func.isRequired,\r\n    validateUser: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    errors: state.errors,\r\n    security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps, { createNewUser, login, validateUser })(DoctorSignupForm);\r\n","import React, { Component } from \"react\";\r\nimport { createNewUser } from \"../../actions/securityActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\nimport { login, validateUser } from \"../../actions/securityActions\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass PatientSignupForm extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            errors: {},\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //Instantly bring the user to their dashboard\r\n        //if they are already logged in\r\n        if (this.props.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    //When submitting, create the patient\r\n    async onSubmit(e) {\r\n        e.preventDefault();\r\n        //Create a new patient account\r\n        const newPatient = {\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n            firstName: this.state.firstName,\r\n            lastName: this.state.lastName,\r\n            specialization: this.state.specialization,\r\n            errors: {},\r\n        };\r\n    \r\n        //Validate the user\r\n        const frontEndErrors = validateUser(newPatient)\r\n        if (Object.keys(frontEndErrors).length != 0) //if errors exist\r\n        {\r\n            this.setState({ errors: frontEndErrors });\r\n            return;\r\n        }\r\n\r\n        //Send the signup request\r\n        await this.props.createNewUser(newPatient, \"patient\", this.props.history);\r\n\r\n        if (Object.keys(this.state.errors).length == 0) //if no errors exist\r\n        {\r\n            //Automatically login\r\n            const LoginRequest = {\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n            };\r\n            await this.props.login(LoginRequest);\r\n            //Navigate to the dashboard\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n        return (\r\n            <div className=\"register\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            {/*Header*/}\r\n                            <div className=\"text-left\" style={{paddingTop:'2%'}}>\r\n                                <Link to='/choose-role' style={{color:'Green'}}><strong style = {{fontFamily:'Titillium Web'}}>&lt; Go back to role selection</strong></Link>\r\n                            </div>\r\n                            <h1 className=\"display-4 text-left page-header\">Create an account</h1>\r\n\r\n                            <div className=\"thin-container\">\r\n                                <p className=\"thin-container-title text-center\">Sign up as a Patient</p>\r\n\r\n                                <form onSubmit={this.onSubmit}>    \r\n                                    {/*Column 1*/}\r\n                                    <table>\r\n                                        {/*Row 1*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.email}\r\n                                                    )}\r\n                                                    placeholder=\"Email address\"\r\n                                                    name=\"email\"\r\n                                                    value={this.state.email}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.email && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.email}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.password}\r\n                                                    )}\r\n                                                    placeholder=\"Password\"\r\n                                                    name=\"password\"\r\n                                                    value={this.state.password}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.password && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.password}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                        {/*Row 2*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.firstName}\r\n                                                    )}\r\n                                                    placeholder=\"First name\"\r\n                                                    name=\"firstName\"\r\n                                                    value={this.state.firstName}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.firstName && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.firstName}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.lastName}\r\n                                                    )}\r\n                                                    placeholder=\"Last name\"\r\n                                                    name=\"lastName\"\r\n                                                    value={this.state.lastName}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.lastName && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.lastName}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </table>\r\n                                    {/*Submit button*/}\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <input\r\n                                            type=\"submit\"\r\n                                            className=\"button-submit button-primary\"\r\n                                            value=\"Create Account\"\r\n                                        />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPatientSignupForm.propTypes = {\r\n    createNewUser: PropTypes.func.isRequired,\r\n    login: PropTypes.func.isRequired,\r\n    validateUser: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    errors: state.errors,\r\n    security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps, { createNewUser, login, validateUser })(PatientSignupForm);\r\n","import React, { Component } from \"react\";\r\nimport { createNewUser } from \"../../actions/securityActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\nimport { login, validateUser } from \"../../actions/securityActions\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass InsurerSignupForm extends Component \r\n{\r\n    constructor() \r\n    {\r\n        super();\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            firmName: \"\",\r\n            errors: {},\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() \r\n    {\r\n        //Instantly bring the user to their dashboard\r\n        //if they are already logged in\r\n        if (this.props.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) \r\n    {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    //When submitting, create the insurer\r\n    async onSubmit(e) \r\n    {\r\n        e.preventDefault();\r\n        //Create a new insurer account\r\n        const newInsurer = {\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n            firstName: this.state.firstName,\r\n            lastName: this.state.lastName,\r\n            firmName: this.state.firmName,\r\n            errors: {}\r\n        };\r\n    \r\n        //Validate the user\r\n        const frontEndErrors = validateUser(newInsurer)\r\n        if (Object.keys(frontEndErrors).length != 0) //if errors exist\r\n        {\r\n            this.setState({ errors: frontEndErrors });\r\n            return;\r\n        }\r\n\r\n        //Send the signup request\r\n        await this.props.createNewUser(newInsurer, \"insurer\", this.props.history);\r\n\r\n        if (Object.keys(this.state.errors).length == 0) //if no errors exist\r\n        {\r\n            //Automatically login\r\n            const LoginRequest = {\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n            };\r\n            await this.props.login(LoginRequest);\r\n            //Navigate to the dashboard\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    onChange(e) \r\n    {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    render()\r\n    {\r\n        const { errors } = this.state;\r\n        return (\r\n            <div className=\"register\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            {/*Header*/}\r\n                            <div className=\"text-left\" style={{paddingTop:'2%'}}>\r\n                                <Link to='/choose-role' style={{color:'Green'}}><strong style = {{fontFamily:'Titillium Web'}}>&lt; Go back to role selection</strong></Link>\r\n                            </div>\r\n                            <h1 className=\"display-4 text-left page-header\">Create an account</h1>\r\n\r\n                            <div className=\"thin-container\">\r\n                                <p className=\"thin-container-title text-center\">Sign up as an Insurance Provider</p>\r\n\r\n                                <form onSubmit={this.onSubmit}>    \r\n                                    {/*Column 1*/}\r\n                                    <table>\r\n                                        {/*Row 1*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.email}\r\n                                                    )}\r\n                                                    placeholder=\"Email address\"\r\n                                                    name=\"email\"\r\n                                                    value={this.state.email}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.email && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.email}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.password}\r\n                                                    )}\r\n                                                    placeholder=\"Password\"\r\n                                                    name=\"password\"\r\n                                                    value={this.state.password}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.password && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.password}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                        {/*Row 2*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.firstName}\r\n                                                    )}\r\n                                                    placeholder=\"First name\"\r\n                                                    name=\"firstName\"\r\n                                                    value={this.state.firstName}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.firstName && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.firstName}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.lastName}\r\n                                                    )}\r\n                                                    placeholder=\"Last name\"\r\n                                                    name=\"lastName\"\r\n                                                    value={this.state.lastName}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.lastName && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.lastName}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                        {/*Row 3*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.firmName}\r\n                                                    )}\r\n                                                    placeholder=\"Company name\"\r\n                                                    name=\"firmName\"\r\n                                                    value={this.state.firmName}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.firmName && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.firmName}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </table>\r\n                                    {/*Submit button*/}\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <input\r\n                                            type=\"submit\"\r\n                                            className=\"button-submit button-primary\"\r\n                                            value=\"Create Account\"\r\n                                        />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nInsurerSignupForm.propTypes = {\r\n    createNewUser: PropTypes.func.isRequired,\r\n    login: PropTypes.func.isRequired,\r\n    validateUser: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    errors: state.errors,\r\n    security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps, { createNewUser, login, validateUser })(InsurerSignupForm);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\nimport { login } from \"../../actions/securityActions\";\r\n\r\nclass LoginForm extends Component \r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            errors: {}\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() \r\n    {\r\n        //Instantly bring the user to their dashboard\r\n        //if they are already logged in\r\n        if (this.props.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) \r\n    {\r\n        //Instantly bring the user to their dashboard\r\n        //if they are already logged in\r\n        if (nextProps.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n\r\n        //Show errors if they exist\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    //Attempt to login\r\n    onSubmit(e) \r\n    {\r\n        e.preventDefault();\r\n        const LoginRequest = {\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n        };\r\n\r\n        this.props.login(LoginRequest);\r\n    }\r\n\r\n    onChange(e) \r\n    {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    render() \r\n    {\r\n        const { errors } = this.state;\r\n        return (\r\n            <div className=\"login\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 m-auto\">\r\n                            {/*Header*/}\r\n                            <h1 className=\"display-4 text-left page-header\">Log In</h1>\r\n\r\n                            <div className=\"thin-container\">\r\n                                <p className=\"thin-container-title text-center\"></p>\r\n\r\n                                <form onSubmit={this.onSubmit}>    \r\n                                    {/*Column 1*/}\r\n                                    <table>\r\n                                        {/*Row 1*/}\r\n                                        <tr>\r\n                                            <td>\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.email}\r\n                                                    )}\r\n                                                    placeholder=\"Email address\"\r\n                                                    name=\"email\"\r\n                                                    value={this.state.email}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.email && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.email}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                        {/*Row 2*/}\r\n                                        <tr>\r\n                                            <td>\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.password}\r\n                                                    )}\r\n                                                    placeholder=\"Password\"\r\n                                                    name=\"password\"\r\n                                                    value={this.state.password}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.password && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.password}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </table>\r\n                                    {/*Submit button*/}\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <input\r\n                                            type=\"submit\"\r\n                                            className=\"button-submit button-primary\"\r\n                                            value=\"Log in\"\r\n                                        />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLoginForm.propTypes = {\r\n    login: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    security: state.security,\r\n    errors: state.errors,\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(LoginForm);\r\n","export default __webpack_public_path__ + \"static/media/vitaLogoWhite.47bd42ff.png\";","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { logout } from \"../actions/securityActions\";\r\nimport vitaLogoWhite from \"../static/vitaLogoWhite.png\";\r\n\r\nclass Header extends Component {\r\n    logout() {\r\n        this.props.logout();\r\n        window.location.href = \"/\";\r\n    }\r\n\r\n    render() {\r\n        const { validToken, user } = this.props.security;\r\n\r\n        const userIsAuthenticated = (\r\n            <span>\r\n                <li className=\"nav-item\">\r\n                <Link to=\"/edit-doctor-profile\" className=\"nav-link\">\r\n                        {user.email}\r\n                    </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/dashboard\" className=\"nav-link\">\r\n                        Dashboard\r\n                    </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/find-doctors\" className=\"nav-link\">\r\n                        Find Doctors\r\n                    </Link>\r\n                </li>\r\n                \r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" onClick={this.logout.bind(this)}>\r\n                        Logout\r\n                    </Link>\r\n                </li>\r\n            </span>\r\n        );\r\n\r\n        const userIsNotAuthenticated = (\r\n            <span>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/choose-role\" className=\"nav-link\">\r\n                        Sign Up\r\n                    </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/login\" className=\"nav-link\">\r\n                        Login\r\n                    </Link>\r\n                </li>\r\n            </span>\r\n        );\r\n\r\n        let headerLinks;\r\n\r\n        if (validToken && user) {\r\n            headerLinks = userIsAuthenticated;\r\n        } else {\r\n            headerLinks = userIsNotAuthenticated;\r\n        }\r\n\r\n        return (\r\n            <span>\r\n                <nav className=\"nav-horizontal\">\r\n                    <div className=\"nav-container\">\r\n                        <ul className=\"nav-list\">\r\n                            <li className=\"nav-item\">\r\n                                <Link to=\"/\">\r\n                                    <img\r\n                                        style={{\r\n                                            paddingTop: \"1vmin\",\r\n                                            paddingBottom: \"1vmin\",\r\n                                            height: \"calc(48px + 2vmin)\",\r\n                                            width: \"auto\",\r\n                                        }}\r\n                                        src={vitaLogoWhite}\r\n                                    />\r\n                                </Link>\r\n                            </li>\r\n                            {headerLinks}\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nHeader.propTypes = {\r\n    logout: PropTypes.func.isRequired,\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps, { logout })(Header);\r\n","export default __webpack_public_path__ + \"static/media/vitaLogoColor.5767547f.png\";","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Footer extends Component \r\n{\r\n    render() {\r\n        return (\r\n            <span>\r\n                <nav className=\"footer-horizontal\">\r\n                    <div className=\"footer-container\">\r\n                        <ul className=\"footer-list\">\r\n                            <span className=\"footer-item\">\r\n                                © Copyright Vita 2021\r\n                            </span>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </span>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport vitaLogoColor from \"../static/vitaLogoColor.png\";\r\n\r\n\r\nclass Landing extends Component \r\n{\r\n    componentDidMount()\r\n    {\r\n        //Instantly bring the user to their dashboard\r\n        //if they are already logged in\r\n        if (this.props.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");   \r\n        }\r\n    }\r\n\r\n    render() \r\n    {\r\n        return (\r\n            <div className=\"landing\">\r\n                <div className=\"light-overlay landing-inner text-dark\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\" style = {{textAlign:\"center\",paddingTop:\"10%\", height:'auto'}}>\r\n                            <div className=\"col-md-6 text-center\">\r\n                                <h1 className=\"display-3 mb-4\" style={{maxWidth: \"100%\"}}>\r\n                                    <img src={vitaLogoColor} style={{maxWidth: \"100%\"}}/>\r\n                                </h1>\r\n                                <h1 style = {{textAlign:\"left\"}}><strong style={{fontFamily:'Titillium Web', fontSize:'32px'}}>Find health insurance, appointments, and doctors with Vita</strong></h1>                               \r\n                            </div>\r\n                            <div className=\"col-md-6 text-center\" style={{paddingTop:'8%'}}>                \r\n                                <div style = {{paddingTop:'2%'}}>\r\n                                    <Link \r\n                                        className=\"btn btn-lg btn-primary button-primary mr-2 button-landing-page\"\r\n                                        to=\"/login\"\r\n                                    >\r\n                                        Log in\r\n                                    </Link>\r\n                                </div>                \r\n                                <div style = {{paddingTop:'2%'}}>\r\n                                    <Link \r\n                                        className=\"btn btn-lg btn-primary button-secondary mr-2 button-landing-page\"\r\n                                        to=\"/choose-role\"\r\n                                    >\r\n                                        Sign Up\r\n                                    </Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLanding.propTypes = {\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Landing);\r\n","import React, { Component } from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default class InvalidUserTypeLanding extends Component \r\n{\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            content: this.props.content\r\n        }\r\n    }\r\n    \r\n    render() \r\n    {\r\n        var closeButton = <Link to=\"/dashboard\" className=\"modal-close-button\">&times;</Link>\r\n\r\n        return (\r\n            <div style={{display: \"block\"}}>\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\" style={{ backgroundColor: \"#d62b00\" }}>\r\n                        <h2 className=\"modal-header-text\">Access Denied</h2>\r\n                        {closeButton}\r\n                    </div>\r\n                    <p className=\"modal-body\">It looks like you don't have permission to access that feature...</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/doctorSelectionIcon.86d5bca8.png\";","export default __webpack_public_path__ + \"static/media/patientSelectionIcon.91aa5637.png\";","export default __webpack_public_path__ + \"static/media/insurerSelectionIcon.6ef5ff00.png\";","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\"\r\nimport { Link } from \"react-router-dom\";\r\nimport doctorIcon from \"../../static/doctorSelectionIcon.png\";\r\nimport patientIcon from \"../../static/patientSelectionIcon.png\";\r\nimport insurerIcon from \"../../static/insurerSelectionIcon.png\";\r\n\r\nclass GeneralSignupForm extends Component {\r\n\r\n\r\n    render(){\r\n        return(\r\n            <span>\r\n\r\n            <p className=\"thin-container-title text-center\">What is your role?</p>\r\n            \r\n            <table style={{marginLeft: \"calc(20vmin)\", marginRight: \"calc(20vmin)\", width: \"auto\"}}>\r\n                <tr>\r\n                    <td className=\"td-option-for-signup\">\r\n                        <Link to=\"/doctor-signup\">\r\n                            <img src={doctorIcon} className=\"image-option-for-signup\"/>\r\n                        </Link>\r\n                    </td>\r\n                    <td className=\"td-option-for-signup\">\r\n                        <Link to=\"/patient-signup\">\r\n                            <img src={patientIcon} className=\"image-option-for-signup\"/>\r\n                        </Link>\r\n                    </td>\r\n                    <td className=\"td-option-for-signup\">\r\n                        <Link to=\"/insurer-signup\">\r\n                            <img src={insurerIcon} className=\"image-option-for-signup\"/>\r\n                        </Link>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <Link to=\"/doctor-signup\" to=\"/doctor-signup\" className=\"link-option-for-signup\">\r\n                            <div className=\"div-option-for-signup\">\r\n                                Doctor\r\n                            </div>\r\n                        </Link>\r\n                    </td>\r\n                    <td>\r\n                        <Link to=\"/patient-signup\" className=\"link-option-for-signup\">\r\n                            <div className=\"div-option-for-signup\">\r\n                                Patient\r\n                            </div>\r\n                        </Link>\r\n                    </td>\r\n                    <td>\r\n                        <Link to=\"/insurer-signup\" className=\"link-option-for-signup\">\r\n                            <div className=\"div-option-for-signup\">\r\n                                Insurance Provider\r\n                            </div>\r\n                        </Link>\r\n                    </td>\r\n                </tr>\r\n            \r\n            </table>\r\n\r\n\r\n            </span>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default GeneralSignupForm;","import React, { Component } from 'react'\r\n\r\nexport default class ChatContainer extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { createNewUser, validateUser } from \"../actions/securityActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getCurrentUser } from \"../actions/userActions\";\r\n\r\nclass DoctorProfileEditor extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            specialization: \"\",\r\n            hospitalName: \"\",\r\n            errors: {},\r\n        };\r\n\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        //Make a request to get all the user's info from the database\r\n        const userId = this.props.security.user.userId;\r\n        this.props.getCurrentUser(userId, this.props.history);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n\r\n        //Set the state to the current user's info so that\r\n        //it shows on the page\r\n        const {\r\n            email,\r\n            firstName,\r\n            lastName,\r\n            specialization,\r\n            hospitalName,\r\n        } = this.props.currentUser.currentUser\r\n\r\n        this.setState({\r\n            email,\r\n            firstName,\r\n            lastName,\r\n            specialization,\r\n            hospitalName\r\n        });\r\n    }\r\n\r\n    //When submitting, create the doctor\r\n    async onSubmit(e) {\r\n        e.preventDefault();\r\n        //Create a new doctor account\r\n        const newDoctor = {\r\n            email: this.email,\r\n            password: this.password,\r\n            firstName: this.firstName,\r\n            lastName: this.lastName,\r\n            specialization: this.specialization,\r\n            hospitalName: this.hospitalName,\r\n            errors: {},\r\n        };\r\n    \r\n        //Validate the user\r\n        const frontEndErrors = validateUser(newDoctor)\r\n        if (Object.keys(frontEndErrors).length != 0) //if errors exist\r\n        {\r\n            this.setState({ errors: frontEndErrors });\r\n            return;\r\n        }\r\n\r\n        //Send the signup request\r\n        await this.props.createNewUser(newDoctor, \"doctor\", this.props.history, this.props.login);\r\n\r\n        if (Object.keys(this.state.errors).length == 0) //if no errors exist\r\n        {\r\n            //Do something\r\n        }\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n        return (\r\n            <div className=\"register\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            {/*Header*/}\r\n                            <div\r\n                                className=\"text-left\"\r\n                                style={{ paddingTop: \"2%\" }}\r\n                            >\r\n                            </div>\r\n                            <h1 className=\"display-4 text-left page-header\">\r\n                                Your Profile\r\n                            </h1>\r\n\r\n                            <div className=\"thin-container\">\r\n                                <p className=\"thin-container-title text-center\">\r\n                                    Edit Your Profile\r\n                                </p>\r\n\r\n                                <form onSubmit={this.onSubmit}>\r\n                                    {/*Column 1*/}\r\n                                    <table>\r\n                                        {/*Row 1*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.email,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"Email address\"\r\n                                                        name=\"email\"\r\n                                                        value={this.state.email}\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.email && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {errors.email}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                            {/*\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.password,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"Password\"\r\n                                                        name=\"password\"\r\n                                                        value={\r\n                                                            this.state.password\r\n                                                        }\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.password && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {errors.password}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td> */}\r\n                                        </tr>\r\n                                        {/*Row 2*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.firstName,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"First name\"\r\n                                                        name=\"firstName\"\r\n                                                        value={\r\n                                                            this.state.firstName\r\n                                                        }\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.firstName && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {errors.firstName}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.lastName,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"Last name\"\r\n                                                        name=\"lastName\"\r\n                                                        value={\r\n                                                            this.state.lastName\r\n                                                        }\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.lastName && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {errors.lastName}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                        {/*Row 3*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.specialization,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"Specialization\"\r\n                                                        name=\"specialization\"\r\n                                                        value={\r\n                                                            this.state.specialization\r\n                                                        }\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.specialization && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {errors.specialization}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.hospitalName,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"Hospital name\"\r\n                                                        name=\"hospitalName\"\r\n                                                        value={\r\n                                                            this.state.hospitalName\r\n                                                        }\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.hospitalName && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {\r\n                                                                errors.hospitalName\r\n                                                            }\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </table>\r\n                                    {/*Submit button*/}\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <input\r\n                                            type=\"submit\"\r\n                                            className=\"button-submit button-primary\"\r\n                                            value=\"Update Account\"\r\n                                        />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDoctorProfileEditor.propTypes = {\r\n    createNewUser: PropTypes.func.isRequired,\r\n    getCurrentUser: PropTypes.func.isRequired,\r\n    security: PropTypes.object.isRequired,\r\n    validateUser: PropTypes.func.isRequired,\r\n    currentUser: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    currentUser: state.currentUser,\r\n    security: state.security,\r\n    errors: state.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { createNewUser, getCurrentUser, validateUser })(DoctorProfileEditor);","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport SecuredRoute from \"./securityUtils/SecuredRoute\";\r\nimport DashboardRoute from \"./securityUtils/DashboardRoute\";\r\n\r\nimport DoctorSearch from \"./components/UserSearch/DoctorSearch.js\";\r\nimport AppointmentScheduler from \"./components/AppointmentScheduler.js\";\r\nimport DoctorSignupForm from \"./components/SignUp/DoctorSignupForm\";\r\nimport PatientSignupForm from \"./components/SignUp/PatientSignupForm\";\r\nimport InsurerSignupForm from \"./components/SignUp/InsurerSignupForm\";\r\nimport Login from \"./components/SignUp/LoginForm\";\r\nimport DoctorDashboard from \"./components/Dashboards/DoctorDashboard\";\r\nimport PatientDashboard from \"./components/Dashboards/PatientDashboard\";\r\nimport InsurerDashboard from \"./components/Dashboards/InsurerDashboard\";\r\nimport Header from \"./components/Header\";\r\nimport Footer from \"./components/Footer\";\r\nimport Landing from \"./components/Landing\";\r\nimport InvalidUserTypeLanding from \"./components/InvalidUserTypeLanding\";\r\nimport GeneralSignupForm from \"./components/SignUp/GeneralSignupForm\";\r\nimport ChatContainer from \"./components/Chat/ChatContainer\"\r\nimport DoctorProfileEditor from \"./components/DoctorProfileEditor\"\r\n\r\n\r\nclass App extends Component \r\n{\r\n  render() \r\n  {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router>\r\n          <div className=\"App\">\r\n            <Header />\r\n            <span style={{marginLeft: \"25vh\", marginRight: \"25vh\"}}>\r\n              {\r\n                //Public routes\r\n              }\r\n              <Route exact path=\"/\" component={Landing} />\r\n              <Route exact path=\"/choose-role\" component={GeneralSignupForm} />\r\n              <Route exact path=\"/login\" component={Login} />\r\n              <Route exact path=\"/patient-signup\" component={PatientSignupForm} />\r\n              <Route exact path=\"/doctor-signup\" component={DoctorSignupForm} />\r\n              <Route exact path=\"/insurer-signup\" component={InsurerSignupForm} />\r\n              <Route exact path=\"/find-doctors\" component={DoctorSearch} />\r\n\r\n              {\r\n                  //Private routes only accessible to users logged in\r\n              }\r\n              <SecuredRoute exact path=\"/edit-doctor-profile\" userTypeBlackList={[\"INS\", \"PAT\"]} component={DoctorProfileEditor} />\r\n              <DashboardRoute exact path=\"/dashboard\" />\r\n              <SecuredRoute exact path=\"/schedule-appointment/:userId\" userTypeBlacklist={[\"DOC\", \"INS\"]} component={AppointmentScheduler} />\r\n              <SecuredRoute exact path=\"/chat\" component={ChatContainer} />\r\n              <SecuredRoute exact path=\"/permission-denied\" component={InvalidUserTypeLanding} />\r\n            </span>\r\n            {/*<Footer />*/}\r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}