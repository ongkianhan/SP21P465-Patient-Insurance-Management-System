{"version":3,"sources":["actions/types.js","reducers/errorReducer.js","reducers/doctorReducer.js","reducers/appointmentReducer.js","reducers/securityReducer.js","reducers/index.js","store.js","securityUtils/SecuredRoute.js","actions/proxy.js","static/defaultProfileIcon.png","components/UserSearch/DoctorCard.js","components/UserSearch/DoctorSearch.js","actions/userActions.js","actions/appointmentActions.js","components/SuccessPopup.js","components/AppointmentTable.js","components/AppointmentScheduler.js","securityUtils/setJWTToken.js","actions/securityActions.js","components/SignUp/DoctorSignupForm.js","components/SignUp/PatientSignupForm.js","components/SignUp/InsurerSignupForm.js","components/SignUp/LoginForm.js","components/Dashboard.js","static/vitaLogoWhite.png","components/Header.js","static/vitaLogoColor.png","components/Footer.js","components/Landing.js","static/doctorSelectionIcon.png","static/patientSelectionIcon.png","static/insurerSelectionIcon.png","components/SignUp/GeneralSignupForm.js","App.js","reportWebVitals.js","index.js"],"names":["GET_ERRORS","GET_MANY_DOCTORS","GET_ONE_DOCTOR","SET_CURRENT_USER","GET_ONE_APPOINTMENT","GET_MANY_APPOINTMENTS","initialState","allDoctors","doctor","allAppointments","appointment","validToken","user","booleanActionPayload","payload","combineReducers","errors","state","action","type","security","middleware","thunk","ReactReduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","connect","Component","component","otherProps","render","props","to","PROXY","DoctorCard","this","className","src","defaultProfileIcon","firstName","lastName","specialization","hospitalName","userId","DoctorSearch","getAllDoctors","noDoctorsMessage","length","role","classnames","placeholder","rows","onKeyPress","e","key","preventDefault","map","id","dispatch","a","axios","get","res","data","getAppointmentsByDoctorId","doctorId","validateAppointment","errorOutput","SuccessPopup","content","display","setState","closeButton","onClick","closeModal","bind","style","AppointmentTable","nextProps","TableContent","dateFormat","require","tableContent","time","Date","setHours","dayOfWeek","push","getHours","appointmentStartTime","setMinutes","getMinutes","appointmentEndTime","console","log","getMilliseconds","generateAppointmentTable","AppointmentScheduler","selectedDate","setSeconds","i","convertDateUsingTimezone","date","appointmentTable","onChange","onSubmit","match","params","getDoctor","history","target","name","value","newDate","document","querySelector","valueAsDate","setDate","getDate","frontEndErrors","Object","keys","alert","createAppointment","toLocaleString","timeZone","marginTop","post","response","setJWTToken","token","defaults","headers","common","createNewUser","newUser","userType","login","LoginRequest","localStorage","setItem","decoded","jwtDecode","validateUser","test","DoctorSignupForm","email","password","newDoctor","paddingTop","color","fontFamily","PatientSignupForm","newPatient","InsurerSignupForm","firmName","newInsurer","LoginForm","Dashboard","Header","logout","location","href","headerLinks","userIsAuthenticated","userIsNotAuthenticated","paddingBottom","height","width","vitaLogoWhite","removeItem","Landing","textAlign","vitaLogoColor","fontSize","GeneralSignupForm","marginLeft","marginRight","doctorIcon","patientIcon","insurerIcon","App","exact","path","Login","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b5cd7f8d.chunk.js","sourcesContent":["export const GET_ERRORS = \"GET_ERRORS\";\r\n\r\n//User search actions\r\nexport const GET_MANY_DOCTORS = \"GET_MANY_DOCTORS\";\r\nexport const GET_ONE_DOCTOR = \"GET_ONE_DOCTOR\";\r\n\r\n//User login\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\n//Appointment scheduling\r\nexport const GET_ONE_APPOINTMENT = \"GET_ONE_APPOINTMENT\";\r\nexport const GET_MANY_APPOINTMENTS = \"GET_MANY_APPOINTMENTS\";","import { GET_ERRORS } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\n/**\r\n * Significant credit to Agile Intelligence: https://github.com/AgileIntelligence/AgileIntPPMTool/\r\n */\r\nexport default function(state = initialState, action) {\r\n    switch (action.type)\r\n    {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import {GET_MANY_DOCTORS, GET_ONE_DOCTOR} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    allDoctors: [],\r\n    doctor: {}\r\n}\r\n\r\n\r\nexport default function(state = initialState, action)\r\n{\r\n    switch (action.type)\r\n    {\r\n        case GET_MANY_DOCTORS:\r\n            return {\r\n                ...state,\r\n                allDoctors: action.payload\r\n            }\r\n        case GET_ONE_DOCTOR:\r\n            return {\r\n                ...state,\r\n                doctor: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {GET_MANY_APPOINTMENTS, GET_ONE_APPOINTMENT} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    allAppointments: [],\r\n    appointment: {}\r\n}\r\n\r\n\r\nexport default function(state = initialState, action)\r\n{\r\n    switch (action.type)\r\n    {\r\n        case GET_MANY_APPOINTMENTS:\r\n            return {\r\n                ...state,\r\n                allAppointments: action.payload\r\n            }\r\n        case GET_ONE_APPOINTMENT:\r\n            return {\r\n                ...state,\r\n                appointment: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_CURRENT_USER } from \"../actions/types\";\r\n\r\n/**\r\n * Significant credit to Agile Intelligence: https://github.com/AgileIntelligence/AgileIntPPMTool/\r\n */\r\n\r\n//Default state is not logged in\r\n//so no token yet\r\nconst initialState = {\r\n    validToken: false,\r\n    user: {}\r\n};\r\n\r\n//Check if the payload exists\r\nconst booleanActionPayload = payload => {\r\n    if (payload) {\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport default function(state = initialState, action) \r\n{\r\n    switch (action.type) \r\n    {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                validToken: booleanActionPayload(action.payload),\r\n                user: action.payload\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport errorReducer from \"./errorReducer\";\r\nimport doctorReducer from \"./doctorReducer\";\r\nimport appointmentReducer from \"./appointmentReducer\";\r\nimport securityReducer from \"./securityReducer\";\r\n\r\n/**\r\n * Use this version of the index to manage Redux store variables\r\n */\r\nexport default combineReducers({\r\n    errors: errorReducer,\r\n    doctor: doctorReducer,\r\n    appointment: appointmentReducer,\r\n    security: securityReducer\r\n});","import {createStore, applyMiddleware, compose} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\n/**\r\n * Significant credit for this file to Agile Intelligence: https://github.com/AgileIntelligence/AgileIntPPMTool/\r\n */\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nlet store;\r\nconst ReactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\n\r\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools)\r\n{\r\n    store = createStore(\r\n        rootReducer, \r\n        initialState,\r\n        compose(\r\n            applyMiddleware(...middleware),\r\n            ReactReduxDevTools\r\n        )\r\n    );\r\n}\r\nelse\r\n{\r\n    store = createStore(rootReducer, initialState, compose(applyMiddleware(...middleware)));\r\n}\r\n\r\n\r\nexport default store;","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * The SecuredRoute object shows either the target component or the login screen\r\n * if the user is not signed in (because their token is invalid).\r\n * Significant credit to Agile Intelligence: https://github.com/AgileIntelligence/AgileIntPPMTool/\r\n */\r\n\r\nconst SecuredRoute = ({ component: Component, security, ...otherProps }) => (\r\n    //If the user is logged in, show the target Component.\r\n    //Otherwise, redirect them to Login.js\r\n    <Route\r\n        {...otherProps}\r\n        render = {props =>\r\n        security.validToken === true ? (\r\n            <Component {...props} />\r\n        ) : (\r\n            <Redirect to=\"/login\" />\r\n        )\r\n        }\r\n    />\r\n);\r\n\r\nSecuredRoute.propTypes = {\r\n    security: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    security: state.security\r\n});\r\n\r\nexport default connect(mapStateToProps)(SecuredRoute);","export const PROXY = \"https://vita-healthcare.herokuapp.com\";","export default __webpack_public_path__ + \"static/media/defaultProfileIcon.f0d7bc03.png\";","import React, { Component } from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {PropTypes} from \"prop-types\";\r\nimport defaultProfileIcon from \"../../static/defaultProfileIcon.png\";\r\n\r\nclass DoctorCard extends Component \r\n{\r\n    render() \r\n    {\r\n        const {doctor} = this.props;\r\n        return (\r\n            <div className=\"container\">\r\n            <div className=\"card card-body bg-light mb-3\">\r\n                <div className=\"row align-items-center\">\r\n                    <div className=\"col-3\">\r\n                        <img className=\"col mh-25\" src={defaultProfileIcon} />\r\n                    </div>\r\n                    <div className=\"col-6 text-left\">\r\n                        <h3>{doctor.firstName}{\" \"}{doctor.lastName}</h3>\r\n                        <h4>{doctor.specialization}</h4>\r\n                        <h4>{doctor.hospitalName}</h4>\r\n                    </div>\r\n                    <div className=\"col-3 justify-content-end\">\r\n                        <Link to={`/schedule-appointment/${doctor.userId}`}>\r\n                            <button className=\"col my-1 button-primary button-card\">\r\n                                Make Appointment\r\n                            </button>\r\n                        </Link>\r\n                        <Link to={`/account/${doctor.userId}`}>\r\n                            <button className=\"col my-1 button-secondary card-button\">\r\n                                View Profile\r\n                            </button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DoctorCard;","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { getAllDoctors } from \"../../actions/userActions\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport DoctorCard from \"./DoctorCard\";\r\nimport classnames from \"classnames\";\r\n\r\nclass DoctorSearch extends Component \r\n{\r\n    componentDidMount() //When the component loads (life cycle method)\r\n    {\r\n        this.props.getAllDoctors();\r\n    }\r\n\r\n    render() {\r\n        const {allDoctors} = this.props.doctor;\r\n        \r\n        //Display a warning if there are no doctors\r\n        var noDoctorsMessage = null;\r\n        if (allDoctors.length === 0)\r\n        {\r\n            noDoctorsMessage = (\r\n                <div className=\"alert alert-info text-center\" role=\"alert\">\r\n                    It looks like no doctors could be found...\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"doctorContainer\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <h1 className=\"display-4 text-left page-header\">Find Doctors</h1>\r\n                            \r\n                            <div className=\"row align-items-center\">\r\n                                <div className=\"col-10\">\r\n                                    <input \r\n                                    className={classnames(\"form-control\")}\r\n                                    placeholder=\"Search by keywords...\"\r\n                                    rows=\"1\"\r\n                                    onKeyPress={e => {\r\n                                        if(e.key === 'Enter')\r\n                                            e.preventDefault()\r\n                                        }}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"col-2 justify-content-end\">\r\n                                    <button type=\"submit\" className=\"button-card button-primary\">\r\n                                        Search\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <br />\r\n                            \r\n                            <br />\r\n                            {/* Get the entire list of doctors. For each DoctorCard, set its prop as the doctor data */}\r\n                            {allDoctors.map(doctor => (\r\n                                <DoctorCard key={doctor.id} doctor={doctor} />\r\n                            ))}\r\n                            {noDoctorsMessage}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n//Set up methods to retrieve doctors from the database\r\nDoctorSearch.propTypes = {\r\n    doctor: PropTypes.object.isRequired,\r\n    getAllDoctors: PropTypes.func.isRequired\r\n} \r\n\r\n//Add the actual doctor state/data to the list of doctors on the page\r\nconst mapStateToProps = state => ({\r\n    doctor: state.doctor\r\n})\r\n\r\nexport default connect(mapStateToProps, {getAllDoctors}) (DoctorSearch);","import axios from \"axios\";\r\nimport { GET_ERRORS, GET_MANY_DOCTORS, GET_ONE_DOCTOR } from \"./types\";\r\nimport { PROXY } from \"./proxy\";\r\n\r\nexport const getAllDoctors = () => async dispatch => {\r\n    const res = await axios.get(PROXY+\"/api/account/all-doctors\");\r\n    dispatch ({\r\n        type: GET_MANY_DOCTORS,\r\n        payload: res.data\r\n    });\r\n}\r\n\r\nexport const getDoctor = (id, history) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${PROXY}/api/account/${id}`);\r\n        dispatch({\r\n            type: GET_ONE_DOCTOR,\r\n            payload: res.data\r\n        })\r\n    } catch (error) {\r\n        history.push(\"/dashboard\");\r\n    }\r\n}","import axios from \"axios\";\r\nimport { GET_MANY_APPOINTMENTS, GET_ERRORS } from \"./types\";\r\nimport { PROXY } from \"./proxy\";\r\n\r\nexport const createAppointment = (appointment, doctorId, history) => async dispatch => \r\n{\r\n    try {\r\n        await axios.post(`${PROXY}/api/appointments/create-appointment/${doctorId}`, appointment);\r\n        dispatch(\r\n        {\r\n            type: GET_ERRORS,\r\n            //Clear the errors for the next use of AddProject or UpdateProject form\r\n            payload: {} \r\n        });\r\n    }\r\n    catch (err)\r\n    {\r\n        dispatch(\r\n        {\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n};\r\n\r\nexport const getAppointmentsByDoctorId = (doctorId) => async dispatch => {\r\n    const res = await axios.get(`${PROXY}/api/appointments/get-by-doctor/${doctorId}`);\r\n    dispatch ({\r\n        type: GET_MANY_APPOINTMENTS,\r\n        payload: res.data\r\n    });\r\n}\r\n\r\nexport const validateAppointment = (appointment) => {\r\n    const errorOutput = {};\r\n    //Check if date is blank\r\n    if (appointment[\"date\"] === null || appointment[\"date\"] === \"\")\r\n    {\r\n        errorOutput[\"date\"] = \"Select a time from the table →\";\r\n    }\r\n    //Check if the date is in the future\r\n    return errorOutput;\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class SuccessPopup extends Component \r\n{\r\n    constructor (props) {\r\n        super(props)\r\n        //Receive the text to place in the popup body\r\n        //and hide the popup\r\n        this.state = {\r\n            content: this.props.content,\r\n            display: \"none\"\r\n        }\r\n\r\n    }\r\n    //Show the modal\r\n    openModal() {\r\n        this.setState({display: \"block\"});\r\n    }\r\n    closeModal() {\r\n        this.setState({display: \"none\"});\r\n    }\r\n\r\n    render() \r\n    {\r\n        //When the user clicks on <span> (x), close the modal\r\n        var closeButton = (\r\n            <span className=\"modal-close-button\" onClick={this.closeModal.bind(this)}>&times;</span>\r\n        )\r\n\r\n        const {display} = this.state;\r\n        return (\r\n            <div className=\"modal-scrim\" style={{display: display}}>\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h2 className=\"modal-header-text\">Success</h2>\r\n                        {closeButton}\r\n                    </div>\r\n                    <p className=\"modal-body\">{this.props.content}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getAppointmentsByDoctorId } from \"../actions/appointmentActions\";\r\n\r\nclass AppointmentTable extends Component \r\n{\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            errors: {}\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        //Request the doctor's already-taken appointments\r\n        const doctorId = this.props.doctorId;\r\n        this.props.getAppointmentsByDoctorId(doctorId);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({errors: nextProps.errors});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {allAppointments} = this.props.appointment;\r\n        const {errors} = this.state;\r\n\r\n        const generateAppointmentTable = (allAppointments) => {    \r\n            //Set up the appointment availability table\r\n            var dateFormat = require(\"dateformat\");\r\n    \r\n            //Inclusive start/stop times that doctors will work between\r\n            const startTimeHours = 8;\r\n            const endTimeHours = 17;\r\n            const minuteDuration = 30;\r\n    \r\n            let tableContent = [];\r\n            //Set initial time for the loop\r\n            /*let time = new Date();\r\n            time.setHours(startTimeHours);\r\n            time.setMinutes(0);\r\n            time.setSeconds(0);*/\r\n            let time = new Date();\r\n            time.setHours(startTimeHours);\r\n    \r\n            //Push the table header\r\n            let dayOfWeek = dateFormat(time, \"dddd, mmmm dS\");\r\n            tableContent.push(\r\n                <th className=\"th-appointment\">\r\n                    {dayOfWeek}\r\n                </th>\r\n            );\r\n    \r\n            //Prepare a filter for which appts are open\r\n            /*var takenStartTimes = new Object();\r\n            allAppointments.forEach(function(entry) {\r\n                console.log(entry);\r\n            });*/\r\n    \r\n            //Build a table of available time intervals\r\n            while (time.getHours() < endTimeHours)\r\n            {\r\n                //Push one row onto the table as a time interval (ex: \"10:30-11:00\")\r\n                let appointmentStartTime = dateFormat(time, \"h:MM\");\r\n                time.setMinutes(time.getMinutes()+minuteDuration)\r\n                let appointmentEndTime = dateFormat(time+minuteDuration, \"h:MM\");\r\n                console.log(\"Comparing \"+time.getMilliseconds());\r\n                if (/*allAppointments.contains(time.getMilliseconds())*/ true) //check if appt is not taken\r\n                {\r\n                    tableContent.push(\r\n                        <tr>\r\n                            <td className=\"td-appointment td-appointment-open\">\r\n                                <span className=\"tooltip-text tooltip-text-left\">Open</span>\r\n                                {appointmentStartTime}{\"-\"}{appointmentEndTime}\r\n                            </td>\r\n                        </tr>\r\n                    );\r\n                }\r\n                else\r\n                {\r\n                    tableContent.push(\r\n                        <tr>\r\n                            <td className=\"td-appointment td-appointment-taken\">\r\n                                <span className=\"tooltip-text tooltip-text-left\">Closed</span>\r\n                                {appointmentStartTime}{\"-\"}{appointmentEndTime}\r\n                            </td>\r\n                        </tr>\r\n                    );\r\n                }\r\n            }\r\n            \r\n            return tableContent;\r\n        }\r\n        let TableContent = generateAppointmentTable(allAppointments);\r\n\r\n        return (\r\n            <table>\r\n                {TableContent}\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nAppointmentTable.propTypes = {\r\n    appointment: PropTypes.object.isRequired,\r\n    getAppointmentsByDoctorId: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n};\r\n  \r\nconst mapStateToProps = state => ({\r\n    appointment: state.appointment,\r\n    errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { getAppointmentsByDoctorId }\r\n)(AppointmentTable);","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\"\r\nimport classnames from \"classnames\";\r\nimport { getDoctor } from \"../actions/userActions\";\r\nimport {createAppointment, getAppointmentsByDoctorId, validateAppointment} from \"../actions/appointmentActions\";\r\nimport SuccessPopup from './SuccessPopup';\r\nimport AppointmentTable from './AppointmentTable';\r\n\r\nclass AppointmentScheduler extends Component \r\n{\r\n    constructor() \r\n    {\r\n        super();\r\n        this.state = {\r\n            date: \"\",\r\n            time: new Date(),\r\n            appointmentTable: <span>Loading appointments...</span>,\r\n            errors: {}\r\n        };\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        //Get the doctor id from the URL\r\n        const {userId} = this.props.match.params;\r\n        //Select the doctor from the database again\r\n        this.props.getDoctor(userId, this.props.history);\r\n\r\n        //Get the doctor's current list of appointments to find which are taken\r\n        this.props.getAppointmentsByDoctorId(userId);\r\n        this.generateAppointmentTable(this.state.time);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) \r\n    {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    onChange(e) \r\n    {\r\n        //Update the state when the user updates any form field\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        if (e.target.name === \"date\")\r\n        {\r\n            //Get the date object from the input element\r\n            var newDate = document.querySelector('#datePicker').valueAsDate;\r\n            newDate.setDate(newDate.getDate()+1); //fix strange behavior of date picker\r\n            console.log(\"Updating table! New date:\"+newDate);\r\n            this.generateAppointmentTable(newDate);\r\n        }\r\n    }\r\n\r\n    onSubmit(e)\r\n    {\r\n        e.preventDefault(); //prevent page refresh\r\n        //Create appointment\r\n        var dateFormat = require(\"dateformat\");\r\n        //var selectedTime = dateFormat(this.state.date, \"mm/dd/yyyy h:MM TT\");\r\n        //console.log(\"Scheduling at \"+selectedTime);\r\n        var appointment = {\r\n            date: this.state.date,\r\n        } //todo: fix zero indexing of date?\r\n        var doctorId = this.props.doctor.doctor.userId;\r\n    \r\n        //Validate the appointment\r\n        const frontEndErrors = validateAppointment(appointment);\r\n        if (Object.keys(frontEndErrors).length != 0) //if errors exist\r\n        {\r\n            this.setState({ errors: frontEndErrors });\r\n            return;\r\n        }\r\n        alert(\"Scheduled at \"+this.state.date+\"!\");\r\n\r\n        //Send appointment to backend for persistence\r\n        this.props.createAppointment(appointment, doctorId, this.props.history);\r\n    }\r\n\r\n    convertDateUsingTimezone(date) {\r\n        return new Date((typeof date === \"string\" ? new Date(date) : date).toLocaleString(\"en-US\", {timeZone: \"America/New_York\"}));   \r\n    }\r\n\r\n    generateAppointmentTable = (selectedDate) => {\r\n        const {allAppointments} = this.props.appointment;\r\n        \r\n        //Set up the appointment availability table\r\n        var dateFormat = require(\"dateformat\");\r\n\r\n        //Inclusive start/stop times that doctors will work between\r\n        const startTimeHours = 8;\r\n        const endTimeHours = 17;\r\n        const minuteDuration = 30;\r\n\r\n        let tableContent = [];\r\n        //Set initial time for the loop\r\n        let time = selectedDate;\r\n        time.setHours(startTimeHours);\r\n        time.setMinutes(0);\r\n        time.setSeconds(0);\r\n\r\n        //Push the table header\r\n        let dayOfWeek = dateFormat(time, \"dddd, mmmm dS\");\r\n        tableContent.push(\r\n            <th className=\"th-appointment\">\r\n                {dayOfWeek}\r\n            </th>\r\n        );\r\n\r\n        //Prepare a filter for which appts are open\r\n        for (var i = 0; i < allAppointments.length; i++)\r\n        {\r\n            console.log(\"Taken time: \"+this.convertDateUsingTimezone(new Date(allAppointments[i].date), \"America/New_York\"));\r\n        }\r\n\r\n        //Build a table of available time intervals\r\n        while (time.getHours() < endTimeHours)\r\n        {\r\n            //Push one row onto the table as a time interval (ex: \"10:30-11:00\")\r\n            let appointmentStartTime = dateFormat(time, \"h:MM\");\r\n            time.setMinutes(time.getMinutes()+minuteDuration)\r\n            let appointmentEndTime = dateFormat(time+minuteDuration, \"h:MM\");\r\n            console.log(\"Comparing \"+time.getMilliseconds());\r\n            if (allAppointments[time.getMilliseconds()] == null) //check if appt is not taken\r\n            {\r\n                tableContent.push(\r\n                    <tr>\r\n                        <td className=\"td-appointment td-appointment-open\">\r\n                            <span className=\"tooltip-text tooltip-text-left\">Open</span>\r\n                            {appointmentStartTime}{\"-\"}{appointmentEndTime}\r\n                        </td>\r\n                    </tr>\r\n                );\r\n            }\r\n            else\r\n            {\r\n                tableContent.push(\r\n                    <tr>\r\n                        <td className=\"td-appointment td-appointment-taken\">\r\n                            <span className=\"tooltip-text tooltip-text-left\">Closed</span>\r\n                            {appointmentStartTime}{\"-\"}{appointmentEndTime}\r\n                        </td>\r\n                    </tr>\r\n                );\r\n            }\r\n        }\r\n        \r\n        this.setState({ appointmentTable: tableContent });\r\n    }\r\n\r\n\r\n    render() {\r\n        const {doctor} = this.props.doctor;\r\n        const {userId} = this.props.match.params;  //Get the doctor id from the URL\r\n        const {errors} = this.state;\r\n        /*const {allAppointments} = this.props.appointment;\r\n        if (allAppointments)\r\n        {\r\n            appointmentTable = this.generateAppointmentTable(this.state.time);\r\n        }*/\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                <h1 className=\"display-4 text-left page-header\">Schedule an Appointment</h1>\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <div className=\"row align-items-start\" style={{marginTop: \"calc(10vmin)\"}}>\r\n                            <div className=\"col-md-8\">\r\n\r\n                                {/* Date/time picker*/}\r\n                                <input type=\"date\"\r\n                                className={classnames(\"form-control textbox\",\r\n                                    {\"is-invalid\": errors.date})}\r\n                                name=\"date\"\r\n                                value={this.state.date}\r\n                                onChange={this.onChange}\r\n                                id=\"datePicker\" />\r\n                                {errors.date && (\r\n                                    <div className=\"invalid-feedback\">{errors.date}</div>\r\n                                )} \r\n                            \r\n                                {/* Doctor information */}\r\n                                <p className=\"text-left page-header\">Doctor: {doctor.firstName}{\" \"}{doctor.lastName}</p>\r\n                                <p className=\"text-left page-header\">Date: {this.state.date}</p>\r\n                                <p className=\"text-left page-header\">Time: Not Selected</p>\r\n\r\n                                {/*Submit button*/}\r\n                                <div className=\"row justify-content-center\">\r\n                                    <input\r\n                                        type=\"submit\"\r\n                                        className=\"button-submit button-primary\"\r\n                                        value=\"Make Appointment\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-4\">\r\n                                <table>\r\n                                    {this.state.appointmentTable}\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                    \r\n                    <SuccessPopup content=\"Appointment scheduled!\"/>\r\n                </div>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nAppointmentScheduler.propTypes = {\r\n    createAppointment: PropTypes.func.isRequired,\r\n    getAppointmentsByDoctorId: PropTypes.func.isRequired,\r\n    validateAppointment: PropTypes.func.isRequired,\r\n    getDoctor: PropTypes.func.isRequired,\r\n    appointment: PropTypes.object.isRequired,\r\n    doctor: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n} \r\n\r\n//Add the actual doctor state/data to the list of doctors on the page\r\nconst mapStateToProps = state => ({\r\n    appointment: state.appointment,\r\n    doctor: state.doctor,\r\n    errors: state.errors\r\n})\r\n\r\nexport default connect(mapStateToProps, {createAppointment, getAppointmentsByDoctorId, getDoctor, validateAppointment}) (AppointmentScheduler);","import axios from \"axios\";\r\n\r\n/**\r\n * Edits the headers sent to any axios request by adding the token value to the \"Authorization\" key.\r\n * Significant credit to Agile Intelligence: https://github.com/AgileIntelligence/AgileIntPPMTool/\r\n */\r\n\r\nconst setJWTToken = token => {\r\n    if (token)\r\n    {\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    }\r\n    else\r\n    {\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setJWTToken;","import axios from \"axios\";\r\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\r\nimport setJWTToken from \"../securityUtils/setJWTToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { PROXY } from \"./proxy\";\r\n\r\n/**\r\n * Significant credit for this file to Agile Intelligence: https://github.com/AgileIntelligence/AgileIntPPMTool/\r\n */\r\n\r\n\r\n//Register the user or show errors \r\nexport const createNewUser = (newUser, userType, history) => async dispatch => {\r\n    try\r\n    {\r\n        await axios.post(\"/api/account/create-\"+userType, newUser);\r\n        dispatch({\r\n            type: GET_ERRORS, \r\n            payload: {} //Clear the errors\r\n        });\r\n    }\r\n    catch (err)\r\n    {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n};\r\n\r\n//Log in and store the JWT token response in the header\r\nexport const login = LoginRequest => async dispatch => {\r\n    try\r\n    {\r\n        //Send a LoginRequest to Spring\r\n        const res = await axios.post(\"/api/account/login\", LoginRequest);\r\n        //Extract JWT token from the response data\r\n        const { token } = res.data;\r\n        //Store the token in the localStorage\r\n        localStorage.setItem(\"jwtToken\", token);\r\n        //Set our token in header ***\r\n        setJWTToken(token);\r\n        //Decode token on React\r\n        const decoded = jwtDecode(token);\r\n        //Dispatch to our securityReducer\r\n        dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n      }\r\n      catch (err)\r\n      {\r\n          dispatch({\r\n              type: GET_ERRORS,\r\n              payload: err.response.data\r\n          });\r\n      }\r\n};\r\n\r\n//Log out and remove the JWT\r\nexport const logout = () => dispatch => {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setJWTToken(false);\r\n    dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: {}\r\n    });\r\n};\r\n\r\n\r\nexport const validateUser = ( user) => {\r\n    const errorOutput = {};\r\n    //Check if the first name or last name contain a number\r\n    if (/\\d/.test(user.firstName))\r\n    {\r\n        errorOutput[\"firstName\"] = \"First name cannot contain numbers\";\r\n    }\r\n    if (/\\d/.test(user.lastName))\r\n    {\r\n        errorOutput[\"lastName\"] = \"Last name cannot contain numbers\";\r\n    }\r\n    return errorOutput;\r\n}","import React, { Component } from \"react\";\r\nimport { createNewUser } from \"../../actions/securityActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\nimport { login, validateUser } from \"../../actions/securityActions\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass DoctorSignupForm extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            specialization: \"\",\r\n            hospitalName: \"\",\r\n            errors: {},\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //Instantly bring the user to their dashboard\r\n        //if they are already logged in\r\n        if (this.props.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    //When submitting, create the doctor\r\n    async onSubmit(e) {\r\n        e.preventDefault();\r\n        //Create a new doctor account\r\n        const newDoctor = {\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n            firstName: this.state.firstName,\r\n            lastName: this.state.lastName,\r\n            specialization: this.state.specialization,\r\n            hospitalName: this.state.hospitalName,\r\n            errors: {},\r\n        };\r\n    \r\n        //Validate the user\r\n        const frontEndErrors = validateUser(newDoctor)\r\n        if (Object.keys(frontEndErrors).length != 0) //if errors exist\r\n        {\r\n            this.setState({ errors: frontEndErrors });\r\n            return;\r\n        }\r\n\r\n        //Send the signup request\r\n        await this.props.createNewUser(newDoctor, \"doctor\", this.props.history, this.props.login);\r\n\r\n        if (Object.keys(this.state.errors).length == 0) //if no errors exist\r\n        {\r\n            //Automatically login\r\n            const LoginRequest = {\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n            };\r\n            await this.props.login(LoginRequest);\r\n            //Navigate to the dashboard\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n        return (\r\n            <div className=\"register\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            {/*Header*/}\r\n                            <div\r\n                                className=\"text-left\"\r\n                                style={{ paddingTop: \"2%\" }}\r\n                            >\r\n                                <Link\r\n                                    to=\"/choose-role\"\r\n                                    style={{ color: \"Green\" }}\r\n                                >\r\n                                    <strong\r\n                                        style={{ fontFamily: \"Titillium Web\" }}\r\n                                    >\r\n                                        &lt; Go back to role selection\r\n                                    </strong>\r\n                                </Link>\r\n                            </div>\r\n                            <h1 className=\"display-4 text-left page-header\">\r\n                                Create an account\r\n                            </h1>\r\n\r\n                            <div className=\"thin-container\">\r\n                                <p className=\"thin-container-title text-center\">\r\n                                    Sign up as Doctor\r\n                                </p>\r\n\r\n                                <form onSubmit={this.onSubmit}>\r\n                                    {/*Column 1*/}\r\n                                    <table>\r\n                                        {/*Row 1*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.email,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"Email address\"\r\n                                                        name=\"email\"\r\n                                                        value={this.state.email}\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.email && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {errors.email}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.password,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"Password\"\r\n                                                        name=\"password\"\r\n                                                        value={\r\n                                                            this.state.password\r\n                                                        }\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.password && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {errors.password}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                        {/*Row 2*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.firstName,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"First name\"\r\n                                                        name=\"firstName\"\r\n                                                        value={\r\n                                                            this.state.firstName\r\n                                                        }\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.firstName && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {errors.firstName}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.lastName,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"Last name\"\r\n                                                        name=\"lastName\"\r\n                                                        value={\r\n                                                            this.state.lastName\r\n                                                        }\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.lastName && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {errors.lastName}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                        {/*Row 3*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.specialization,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"Specialization\"\r\n                                                        name=\"specialization\"\r\n                                                        value={\r\n                                                            this.state.specialization\r\n                                                        }\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.specialization && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {errors.specialization}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={classnames(\r\n                                                            \"form-control textbox\",\r\n                                                            {\r\n                                                                \"is-invalid\":\r\n                                                                    errors.hospitalName,\r\n                                                            }\r\n                                                        )}\r\n                                                        placeholder=\"Hospital name\"\r\n                                                        name=\"hospitalName\"\r\n                                                        value={\r\n                                                            this.state.hospitalName\r\n                                                        }\r\n                                                        onChange={this.onChange}\r\n                                                    />\r\n                                                    {errors.hospitalName && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {\r\n                                                                errors.hospitalName\r\n                                                            }\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </table>\r\n                                    {/*Submit button*/}\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <input\r\n                                            type=\"submit\"\r\n                                            className=\"button-submit button-primary\"\r\n                                            value=\"Create Account\"\r\n                                        />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDoctorSignupForm.propTypes = {\r\n    createNewUser: PropTypes.func.isRequired,\r\n    login: PropTypes.func.isRequired,\r\n    validateUser: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    errors: state.errors,\r\n    security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps, { createNewUser, login, validateUser })(DoctorSignupForm);\r\n","import React, { Component } from \"react\";\r\nimport { createNewUser } from \"../../actions/securityActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\nimport { login, validateUser } from \"../../actions/securityActions\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass PatientSignupForm extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            errors: {},\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //Instantly bring the user to their dashboard\r\n        //if they are already logged in\r\n        if (this.props.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    //When submitting, create the patient\r\n    async onSubmit(e) {\r\n        e.preventDefault();\r\n        //Create a new patient account\r\n        const newPatient = {\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n            firstName: this.state.firstName,\r\n            lastName: this.state.lastName,\r\n            specialization: this.state.specialization,\r\n            errors: {},\r\n        };\r\n    \r\n        //Validate the user\r\n        const frontEndErrors = validateUser(newPatient)\r\n        if (Object.keys(frontEndErrors).length != 0) //if errors exist\r\n        {\r\n            this.setState({ errors: frontEndErrors });\r\n            return;\r\n        }\r\n\r\n        //Send the signup request\r\n        await this.props.createNewUser(newPatient, \"patient\", this.props.history);\r\n\r\n        if (Object.keys(this.state.errors).length == 0) //if no errors exist\r\n        {\r\n            //Automatically login\r\n            const LoginRequest = {\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n            };\r\n            await this.props.login(LoginRequest);\r\n            //Navigate to the dashboard\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n        return (\r\n            <div className=\"register\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            {/*Header*/}\r\n                            <div className=\"text-left\" style={{paddingTop:'2%'}}>\r\n                                <Link to='/choose-role' style={{color:'Green'}}><strong style = {{fontFamily:'Titillium Web'}}>&lt; Go back to role selection</strong></Link>\r\n                            </div>\r\n                            <h1 className=\"display-4 text-left page-header\">Create an account</h1>\r\n\r\n                            <div className=\"thin-container\">\r\n                                <p className=\"thin-container-title text-center\">Sign up as a Patient</p>\r\n\r\n                                <form onSubmit={this.onSubmit}>    \r\n                                    {/*Column 1*/}\r\n                                    <table>\r\n                                        {/*Row 1*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.email}\r\n                                                    )}\r\n                                                    placeholder=\"Email address\"\r\n                                                    name=\"email\"\r\n                                                    value={this.state.email}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.email && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.email}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.password}\r\n                                                    )}\r\n                                                    placeholder=\"Password\"\r\n                                                    name=\"password\"\r\n                                                    value={this.state.password}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.password && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.password}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                        {/*Row 2*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.firstName}\r\n                                                    )}\r\n                                                    placeholder=\"First name\"\r\n                                                    name=\"firstName\"\r\n                                                    value={this.state.firstName}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.firstName && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.firstName}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.lastName}\r\n                                                    )}\r\n                                                    placeholder=\"Last name\"\r\n                                                    name=\"lastName\"\r\n                                                    value={this.state.lastName}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.lastName && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.lastName}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </table>\r\n                                    {/*Submit button*/}\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <input\r\n                                            type=\"submit\"\r\n                                            className=\"button-submit button-primary\"\r\n                                            value=\"Create Account\"\r\n                                        />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPatientSignupForm.propTypes = {\r\n    createNewUser: PropTypes.func.isRequired,\r\n    login: PropTypes.func.isRequired,\r\n    validateUser: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    errors: state.errors,\r\n    security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps, { createNewUser, login, validateUser })(PatientSignupForm);\r\n","import React, { Component } from \"react\";\r\nimport { createNewUser } from \"../../actions/securityActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\nimport { login, validateUser } from \"../../actions/securityActions\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass InsurerSignupForm extends Component \r\n{\r\n    constructor() \r\n    {\r\n        super();\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            firmName: \"\",\r\n            errors: {},\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() \r\n    {\r\n        //Instantly bring the user to their dashboard\r\n        //if they are already logged in\r\n        if (this.props.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) \r\n    {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    //When submitting, create the insurer\r\n    async onSubmit(e) \r\n    {\r\n        e.preventDefault();\r\n        //Create a new insurer account\r\n        const newInsurer = {\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n            firstName: this.state.firstName,\r\n            lastName: this.state.lastName,\r\n            firmName: this.state.firmName,\r\n            errors: {}\r\n        };\r\n    \r\n        //Validate the user\r\n        const frontEndErrors = validateUser(newInsurer)\r\n        if (Object.keys(frontEndErrors).length != 0) //if errors exist\r\n        {\r\n            this.setState({ errors: frontEndErrors });\r\n            return;\r\n        }\r\n\r\n        //Send the signup request\r\n        await this.props.createNewUser(newInsurer, \"insurer\", this.props.history);\r\n\r\n        if (Object.keys(this.state.errors).length == 0) //if no errors exist\r\n        {\r\n            //Automatically login\r\n            const LoginRequest = {\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n            };\r\n            await this.props.login(LoginRequest);\r\n            //Navigate to the dashboard\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    onChange(e) \r\n    {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    render()\r\n    {\r\n        const { errors } = this.state;\r\n        return (\r\n            <div className=\"register\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            {/*Header*/}\r\n                            <div className=\"text-left\" style={{paddingTop:'2%'}}>\r\n                                <Link to='/choose-role' style={{color:'Green'}}><strong style = {{fontFamily:'Titillium Web'}}>&lt; Go back to role selection</strong></Link>\r\n                            </div>\r\n                            <h1 className=\"display-4 text-left page-header\">Create an account</h1>\r\n\r\n                            <div className=\"thin-container\">\r\n                                <p className=\"thin-container-title text-center\">Sign up as an Insurance Provider</p>\r\n\r\n                                <form onSubmit={this.onSubmit}>    \r\n                                    {/*Column 1*/}\r\n                                    <table>\r\n                                        {/*Row 1*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.email}\r\n                                                    )}\r\n                                                    placeholder=\"Email address\"\r\n                                                    name=\"email\"\r\n                                                    value={this.state.email}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.email && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.email}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.password}\r\n                                                    )}\r\n                                                    placeholder=\"Password\"\r\n                                                    name=\"password\"\r\n                                                    value={this.state.password}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.password && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.password}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                        {/*Row 2*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.firstName}\r\n                                                    )}\r\n                                                    placeholder=\"First name\"\r\n                                                    name=\"firstName\"\r\n                                                    value={this.state.firstName}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.firstName && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.firstName}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.lastName}\r\n                                                    )}\r\n                                                    placeholder=\"Last name\"\r\n                                                    name=\"lastName\"\r\n                                                    value={this.state.lastName}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.lastName && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.lastName}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                        {/*Row 3*/}\r\n                                        <tr>\r\n                                            <td className=\"td-textbox-holder\">\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.firmName}\r\n                                                    )}\r\n                                                    placeholder=\"Company name\"\r\n                                                    name=\"firmName\"\r\n                                                    value={this.state.firmName}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.firmName && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.firmName}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </table>\r\n                                    {/*Submit button*/}\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <input\r\n                                            type=\"submit\"\r\n                                            className=\"button-submit button-primary\"\r\n                                            value=\"Create Account\"\r\n                                        />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nInsurerSignupForm.propTypes = {\r\n    createNewUser: PropTypes.func.isRequired,\r\n    login: PropTypes.func.isRequired,\r\n    validateUser: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    errors: state.errors,\r\n    security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps, { createNewUser, login, validateUser })(InsurerSignupForm);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\nimport { login } from \"../../actions/securityActions\";\r\n\r\nclass LoginForm extends Component \r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            errors: {}\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() \r\n    {\r\n        //Instantly bring the user to their dashboard\r\n        //if they are already logged in\r\n        if (this.props.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) \r\n    {\r\n        //Instantly bring the user to their dashboard\r\n        //if they are already logged in\r\n        if (nextProps.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n\r\n        //Show errors if they exist\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    //Attempt to login\r\n    onSubmit(e) \r\n    {\r\n        e.preventDefault();\r\n        const LoginRequest = {\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n        };\r\n\r\n        this.props.login(LoginRequest);\r\n    }\r\n\r\n    onChange(e) \r\n    {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    render() \r\n    {\r\n        const { errors } = this.state;\r\n        return (\r\n            <div className=\"login\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 m-auto\">\r\n                            {/*Header*/}\r\n                            <h1 className=\"display-4 text-left page-header\">Log In</h1>\r\n\r\n                            <div className=\"thin-container\">\r\n                                <p className=\"thin-container-title text-center\"></p>\r\n\r\n                                <form onSubmit={this.onSubmit}>    \r\n                                    {/*Column 1*/}\r\n                                    <table>\r\n                                        {/*Row 1*/}\r\n                                        <tr>\r\n                                            <td>\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.email}\r\n                                                    )}\r\n                                                    placeholder=\"Email address\"\r\n                                                    name=\"email\"\r\n                                                    value={this.state.email}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.email && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.email}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                        {/*Row 2*/}\r\n                                        <tr>\r\n                                            <td>\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\r\n                                                        \"form-control textbox\", {\"is-invalid\": errors.password}\r\n                                                    )}\r\n                                                    placeholder=\"Password\"\r\n                                                    name=\"password\"\r\n                                                    value={this.state.password}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                                {errors.password && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {errors.password}\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </table>\r\n                                    {/*Submit button*/}\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <input\r\n                                            type=\"submit\"\r\n                                            className=\"button-submit button-primary\"\r\n                                            value=\"Log in\"\r\n                                        />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLoginForm.propTypes = {\r\n    login: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    security: state.security,\r\n    errors: state.errors,\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(LoginForm);\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Dashboard extends Component\r\n{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Temporary dashboard</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/vitaLogoWhite.47bd42ff.png\";","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { logout } from \"../actions/securityActions\";\r\nimport vitaLogoWhite from \"../static/vitaLogoWhite.png\";\r\n\r\nclass Header extends Component {\r\n    logout() {\r\n        this.props.logout();\r\n        window.location.href = \"/\";\r\n    }\r\n\r\n    render() {\r\n        const { validToken, user } = this.props.security;\r\n\r\n        const userIsAuthenticated = (\r\n            <span>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/dashboard\" className=\"nav-link\">\r\n                        Dashboard\r\n                    </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/find-doctors\" className=\"nav-link\">\r\n                        Find Doctors\r\n                    </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <span className=\"nav-link\">\r\n                        {user.email}\r\n                    </span>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" onClick={this.logout.bind(this)}>\r\n                        Logout\r\n                    </Link>\r\n                </li>\r\n            </span>\r\n        );\r\n\r\n        const userIsNotAuthenticated = (\r\n            <span>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/choose-role\" className=\"nav-link\">\r\n                        Sign Up\r\n                    </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/login\" className=\"nav-link\">\r\n                        Login\r\n                    </Link>\r\n                </li>\r\n            </span>\r\n        );\r\n\r\n        let headerLinks;\r\n\r\n        if (validToken && user) {\r\n            headerLinks = userIsAuthenticated;\r\n        } else {\r\n            headerLinks = userIsNotAuthenticated;\r\n        }\r\n\r\n        return (\r\n            <span>\r\n                <nav className=\"nav-horizontal\">\r\n                    <div className=\"nav-container\">\r\n                        <ul className=\"nav-list\">\r\n                            <li className=\"nav-item\">\r\n                                <Link to=\"/\">\r\n                                    <img\r\n                                        style={{\r\n                                            paddingTop: \"1vmin\",\r\n                                            paddingBottom: \"1vmin\",\r\n                                            height: \"calc(48px + 2vmin)\",\r\n                                            width: \"auto\",\r\n                                        }}\r\n                                        src={vitaLogoWhite}\r\n                                    />\r\n                                </Link>\r\n                            </li>\r\n                            {headerLinks}\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nHeader.propTypes = {\r\n    logout: PropTypes.func.isRequired,\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps, { logout })(Header);\r\n","export default __webpack_public_path__ + \"static/media/vitaLogoColor.5767547f.png\";","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Footer extends Component \r\n{\r\n    render() {\r\n        return (\r\n            <span>\r\n                <nav className=\"footer-horizontal\">\r\n                    <div className=\"footer-container\">\r\n                        <ul className=\"footer-list\">\r\n                            <span className=\"footer-item\">\r\n                                © Copyright Vita 2021\r\n                            </span>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </span>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport vitaLogoColor from \"../static/vitaLogoColor.png\";\r\n\r\n\r\nclass Landing extends Component \r\n{\r\n    componentDidMount()\r\n    {\r\n        //Instantly bring the user to their dashboard\r\n        //if they are already logged in\r\n        if (this.props.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    render() \r\n    {\r\n        return (\r\n            <div className=\"landing\">\r\n                <div className=\"light-overlay landing-inner text-dark\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\" style = {{textAlign:\"center\",paddingTop:\"10%\", height:'auto'}}>\r\n                            <div className=\"col-md-6 text-center\">\r\n                                <h1 className=\"display-3 mb-4\">\r\n                                    <img src={vitaLogoColor} />\r\n                                </h1>\r\n                                <h1 style = {{textAlign:\"left\"}}><strong style={{fontFamily:'Titillium Web', fontSize:'32px'}}>Find health insurance, appointments, and doctors with Vita</strong></h1>                               \r\n                            </div>\r\n                            <div className=\"col-md-6 text-center\" style={{paddingTop:'8%'}}>                \r\n                                <div style = {{paddingTop:'2%'}}>\r\n                                    <Link \r\n                                        className=\"btn btn-lg btn-primary button-primary mr-2 button-landing-page\"\r\n                                        to=\"/login\"\r\n                                    >\r\n                                        Log in\r\n                                    </Link>\r\n                                </div>                \r\n                                <div style = {{paddingTop:'2%'}}>\r\n                                    <Link \r\n                                        className=\"btn btn-lg btn-primary button-secondary mr-2 button-landing-page\"\r\n                                        to=\"/choose-role\"\r\n                                    >\r\n                                        Sign Up\r\n                                    </Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLanding.propTypes = {\r\n    security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Landing);\r\n","export default __webpack_public_path__ + \"static/media/doctorSelectionIcon.86d5bca8.png\";","export default __webpack_public_path__ + \"static/media/patientSelectionIcon.91aa5637.png\";","export default __webpack_public_path__ + \"static/media/insurerSelectionIcon.6ef5ff00.png\";","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\"\r\nimport { Link } from \"react-router-dom\";\r\nimport doctorIcon from \"../../static/doctorSelectionIcon.png\";\r\nimport patientIcon from \"../../static/patientSelectionIcon.png\";\r\nimport insurerIcon from \"../../static/insurerSelectionIcon.png\";\r\n\r\nclass GeneralSignupForm extends Component {\r\n\r\n\r\n    render(){\r\n        return(\r\n            <span>\r\n\r\n            <p className=\"thin-container-title text-center\">What is your role?</p>\r\n            \r\n            <table style={{marginLeft: \"calc(20vmin)\", marginRight: \"calc(20vmin)\", width: \"auto\"}}>\r\n                <tr>\r\n                    <td className=\"td-option-for-signup\">\r\n                        <Link to=\"/doctor-signup\">\r\n                            <img src={doctorIcon} className=\"image-option-for-signup\"/>\r\n                        </Link>\r\n                    </td>\r\n                    <td className=\"td-option-for-signup\">\r\n                        <Link to=\"/patient-signup\">\r\n                            <img src={patientIcon} className=\"image-option-for-signup\"/>\r\n                        </Link>\r\n                    </td>\r\n                    <td className=\"td-option-for-signup\">\r\n                        <Link to=\"/insurer-signup\">\r\n                            <img src={insurerIcon} className=\"image-option-for-signup\"/>\r\n                        </Link>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <Link to=\"/doctor-signup\" to=\"/doctor-signup\" className=\"link-option-for-signup\">\r\n                            <div className=\"div-option-for-signup\">\r\n                                Doctor\r\n                            </div>\r\n                        </Link>\r\n                    </td>\r\n                    <td>\r\n                        <Link to=\"/patient-signup\" className=\"link-option-for-signup\">\r\n                            <div className=\"div-option-for-signup\">\r\n                                Patient\r\n                            </div>\r\n                        </Link>\r\n                    </td>\r\n                    <td>\r\n                        <Link to=\"/insurer-signup\" className=\"link-option-for-signup\">\r\n                            <div className=\"div-option-for-signup\">\r\n                                Insurance Provider\r\n                            </div>\r\n                        </Link>\r\n                    </td>\r\n                </tr>\r\n            \r\n            </table>\r\n\r\n\r\n            </span>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default GeneralSignupForm;","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport SecuredRoute from \"./securityUtils/SecuredRoute\";\r\n\r\nimport DoctorSearch from \"./components/UserSearch/DoctorSearch.js\";\r\nimport AppointmentScheduler from \"./components/AppointmentScheduler.js\";\r\nimport DoctorSignupForm from \"./components/SignUp/DoctorSignupForm\";\r\nimport PatientSignupForm from \"./components/SignUp/PatientSignupForm\";\r\nimport InsurerSignupForm from \"./components/SignUp/InsurerSignupForm\";\r\nimport Login from \"./components/SignUp/LoginForm\";\r\nimport Dashboard from \"./components/Dashboard\";\r\nimport Header from \"./components/Header\";\r\nimport Footer from \"./components/Footer\";\r\nimport Landing from \"./components/Landing\";\r\nimport GeneralSignupForm from \"./components/SignUp/GeneralSignupForm\";\r\n\r\n\r\nclass App extends Component \r\n{\r\n  render() \r\n  {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router>\r\n          <div className=\"App\">\r\n            <Header />\r\n            <span style={{marginLeft: \"25vh\", marginRight: \"25vh\"}}>\r\n              {\r\n                //Public routes\r\n              }\r\n              <Route exact path=\"/\" component={Landing} />\r\n              <Route exact path=\"/choose-role\" component={GeneralSignupForm} />\r\n              <Route exact path=\"/login\" component={Login} />\r\n              <Route exact path=\"/patient-signup\" component={PatientSignupForm} />\r\n              <Route exact path=\"/doctor-signup\" component={DoctorSignupForm} />\r\n              <Route exact path=\"/insurer-signup\" component={InsurerSignupForm} />\r\n              <Route exact path=\"/find-doctors\" component={DoctorSearch} />\r\n\r\n              {\r\n                  //Private routes only accessible to users logged in\r\n              }\r\n              <SecuredRoute exact path=\"/dashboard\" component={Dashboard} />\r\n              <Route exact path=\"/schedule-appointment/:userId\" component={AppointmentScheduler} />\r\n            </span>\r\n            {/*<Footer />*/}\r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}